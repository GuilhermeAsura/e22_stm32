
stm32_ssd1306_e22_lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080073d4  080073d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800754c  0800754c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  0800754c  0800754c  0000854c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007554  08007554  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007554  08007554  00008554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800755c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003890  2000006c  080075c8  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038fc  080075c8  000098fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001319e  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003211  00000000  00000000  0001c23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001f450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e07  00000000  00000000  00020678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e0f  00000000  00000000  0002147f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001396d  00000000  00000000  0003828e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000992aa  00000000  00000000  0004bbfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005294  00000000  00000000  000e4ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ea17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073bc 	.word	0x080073bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080073bc 	.word	0x080073bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f103 0208 	add.w	r2, r3, #8
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f103 0208 	add.w	r2, r3, #8
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f103 0208 	add.w	r2, r3, #8
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000606:	b480      	push	{r7}
 8000608:	b085      	sub	sp, #20
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800061c:	d103      	bne.n	8000626 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e00c      	b.n	8000640 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3308      	adds	r3, #8
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e002      	b.n	8000634 <vListInsert+0x2e>
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	429a      	cmp	r2, r3
 800063e:	d2f6      	bcs.n	800062e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	685a      	ldr	r2, [r3, #4]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	6892      	ldr	r2, [r2, #8]
 800068e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	6852      	ldr	r2, [r2, #4]
 8000698:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d103      	bne.n	80006ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10b      	bne.n	80006fc <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d05d      	beq.n	80007be <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000706:	2b00      	cmp	r3, #0
 8000708:	d059      	beq.n	80007be <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000712:	2100      	movs	r1, #0
 8000714:	fba3 2302 	umull	r2, r3, r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d000      	beq.n	800071e <xQueueGenericReset+0x52>
 800071c:	2101      	movs	r1, #1
 800071e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000720:	2b00      	cmp	r3, #0
 8000722:	d14c      	bne.n	80007be <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000724:	f001 fd92 	bl	800224c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000730:	6939      	ldr	r1, [r7, #16]
 8000732:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000734:	fb01 f303 	mul.w	r3, r1, r3
 8000738:	441a      	add	r2, r3
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000754:	3b01      	subs	r3, #1
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800075a:	fb01 f303 	mul.w	r3, r1, r3
 800075e:	441a      	add	r2, r3
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	22ff      	movs	r2, #255	@ 0xff
 8000768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	22ff      	movs	r2, #255	@ 0xff
 8000770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d114      	bne.n	80007a4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d01a      	beq.n	80007b8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	3310      	adds	r3, #16
 8000786:	4618      	mov	r0, r3
 8000788:	f000 ff72 	bl	8001670 <xTaskRemoveFromEventList>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d012      	beq.n	80007b8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <xQueueGenericReset+0x120>)
 8000794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	e009      	b.n	80007b8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	3310      	adds	r3, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff feff 	bl	80005ac <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	3324      	adds	r3, #36	@ 0x24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fefa 	bl	80005ac <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80007b8:	f001 fd7a 	bl	80022b0 <vPortExitCritical>
 80007bc:	e001      	b.n	80007c2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10b      	bne.n	80007e0 <xQueueGenericReset+0x114>
        __asm volatile
 80007c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	60bb      	str	r3, [r7, #8]
    }
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80007e0:	697b      	ldr	r3, [r7, #20]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	e000ed04 	.word	0xe000ed04

080007f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	4613      	mov	r3, r2
 80007fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d02e      	beq.n	8000866 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000808:	2100      	movs	r1, #0
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	fba3 2302 	umull	r2, r3, r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	d000      	beq.n	8000818 <xQueueGenericCreate+0x28>
 8000816:	2101      	movs	r1, #1
 8000818:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800081a:	2b00      	cmp	r3, #0
 800081c:	d123      	bne.n	8000866 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000826:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 800082a:	d81c      	bhi.n	8000866 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	3348      	adds	r3, #72	@ 0x48
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fde4 	bl	8002408 <pvPortMalloc>
 8000840:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d01d      	beq.n	8000884 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3348      	adds	r3, #72	@ 0x48
 8000850:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f815 	bl	800088e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000864:	e00e      	b.n	8000884 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10b      	bne.n	8000884 <xQueueGenericCreate+0x94>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	613b      	str	r3, [r7, #16]
    }
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000884:	69fb      	ldr	r3, [r7, #28]
    }
 8000886:	4618      	mov	r0, r3
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d103      	bne.n	80008aa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e002      	b.n	80008b0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008bc:	2101      	movs	r1, #1
 80008be:	69b8      	ldr	r0, [r7, #24]
 80008c0:	f7ff ff04 	bl	80006cc <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	@ 0x30
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80008e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10b      	bne.n	80008fe <xQueueReceive+0x32>
        __asm volatile
 80008e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ea:	f383 8811 	msr	BASEPRI, r3
 80008ee:	f3bf 8f6f 	isb	sy
 80008f2:	f3bf 8f4f 	dsb	sy
 80008f6:	623b      	str	r3, [r7, #32]
    }
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	e7fd      	b.n	80008fa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d103      	bne.n	800090c <xQueueReceive+0x40>
 8000904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <xQueueReceive+0x44>
 800090c:	2301      	movs	r3, #1
 800090e:	e000      	b.n	8000912 <xQueueReceive+0x46>
 8000910:	2300      	movs	r3, #0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10b      	bne.n	800092e <xQueueReceive+0x62>
        __asm volatile
 8000916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800091a:	f383 8811 	msr	BASEPRI, r3
 800091e:	f3bf 8f6f 	isb	sy
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	61fb      	str	r3, [r7, #28]
    }
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	e7fd      	b.n	800092a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800092e:	f001 f86b 	bl	8001a08 <xTaskGetSchedulerState>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <xQueueReceive+0x72>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <xQueueReceive+0x76>
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <xQueueReceive+0x78>
 8000942:	2300      	movs	r3, #0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10b      	bne.n	8000960 <xQueueReceive+0x94>
        __asm volatile
 8000948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800094c:	f383 8811 	msr	BASEPRI, r3
 8000950:	f3bf 8f6f 	isb	sy
 8000954:	f3bf 8f4f 	dsb	sy
 8000958:	61bb      	str	r3, [r7, #24]
    }
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000960:	f001 fc74 	bl	800224c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	2b00      	cmp	r3, #0
 800096e:	d01f      	beq.n	80009b0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000974:	f000 f88c 	bl	8000a90 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00f      	beq.n	80009a8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800098a:	3310      	adds	r3, #16
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fe6f 	bl	8001670 <xTaskRemoveFromEventList>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000998:	4b3c      	ldr	r3, [pc, #240]	@ (8000a8c <xQueueReceive+0x1c0>)
 800099a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	f3bf 8f4f 	dsb	sy
 80009a4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80009a8:	f001 fc82 	bl	80022b0 <vPortExitCritical>
                return pdPASS;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e069      	b.n	8000a84 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009b6:	f001 fc7b 	bl	80022b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e062      	b.n	8000a84 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d106      	bne.n	80009d2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 ff29 	bl	8001820 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009d2:	f001 fc6d 	bl	80022b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009d6:	f000 fb51 	bl	800107c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009da:	f001 fc37 	bl	800224c <vPortEnterCritical>
 80009de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009ea:	d103      	bne.n	80009f4 <xQueueReceive+0x128>
 80009ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a00:	d103      	bne.n	8000a0a <xQueueReceive+0x13e>
 8000a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a0a:	f001 fc51 	bl	80022b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a0e:	1d3a      	adds	r2, r7, #4
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 ff18 	bl	800184c <xTaskCheckForTimeOut>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d123      	bne.n	8000a6a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a24:	f000 f8ac 	bl	8000b80 <prvIsQueueEmpty>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d017      	beq.n	8000a5e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a30:	3324      	adds	r3, #36	@ 0x24
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fdae 	bl	8001598 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a3e:	f000 f84d 	bl	8000adc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a42:	f000 fb29 	bl	8001098 <xTaskResumeAll>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d189      	bne.n	8000960 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <xQueueReceive+0x1c0>)
 8000a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	f3bf 8f4f 	dsb	sy
 8000a58:	f3bf 8f6f 	isb	sy
 8000a5c:	e780      	b.n	8000960 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a60:	f000 f83c 	bl	8000adc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a64:	f000 fb18 	bl	8001098 <xTaskResumeAll>
 8000a68:	e77a      	b.n	8000960 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a6c:	f000 f836 	bl	8000adc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a70:	f000 fb12 	bl	8001098 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a76:	f000 f883 	bl	8000b80 <prvIsQueueEmpty>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f43f af6f 	beq.w	8000960 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000a82:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3730      	adds	r7, #48	@ 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d018      	beq.n	8000ad4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	441a      	add	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d303      	bcc.n	8000ac4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68d9      	ldr	r1, [r3, #12]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	461a      	mov	r2, r3
 8000ace:	6838      	ldr	r0, [r7, #0]
 8000ad0:	f005 ff5f 	bl	8006992 <memcpy>
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000ae4:	f001 fbb2 	bl	800224c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000aee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000af0:	e011      	b.n	8000b16 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d012      	beq.n	8000b20 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3324      	adds	r3, #36	@ 0x24
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fdb6 	bl	8001670 <xTaskRemoveFromEventList>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b0a:	f000 feff 	bl	800190c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	dce9      	bgt.n	8000af2 <prvUnlockQueue+0x16>
 8000b1e:	e000      	b.n	8000b22 <prvUnlockQueue+0x46>
                    break;
 8000b20:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	22ff      	movs	r2, #255	@ 0xff
 8000b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000b2a:	f001 fbc1 	bl	80022b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000b2e:	f001 fb8d 	bl	800224c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b38:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b3a:	e011      	b.n	8000b60 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d012      	beq.n	8000b6a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3310      	adds	r3, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fd91 	bl	8001670 <xTaskRemoveFromEventList>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000b54:	f000 feda 	bl	800190c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	dce9      	bgt.n	8000b3c <prvUnlockQueue+0x60>
 8000b68:	e000      	b.n	8000b6c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000b6a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	22ff      	movs	r2, #255	@ 0xff
 8000b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000b74:	f001 fb9c 	bl	80022b0 <vPortExitCritical>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000b88:	f001 fb60 	bl	800224c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e001      	b.n	8000b9e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b9e:	f001 fb87 	bl	80022b0 <vPortExitCritical>

    return xReturn;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000bbc:	f001 fb46 	bl	800224c <vPortEnterCritical>
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bcc:	d103      	bne.n	8000bd6 <vQueueWaitForMessageRestricted+0x2a>
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000be2:	d103      	bne.n	8000bec <vQueueWaitForMessageRestricted+0x40>
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000bec:	f001 fb60 	bl	80022b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d106      	bne.n	8000c06 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3324      	adds	r3, #36	@ 0x24
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fcef 	bl	80015e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff68 	bl	8000adc <prvUnlockQueue>
    }
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	@ 0x30
 8000c18:	af04      	add	r7, sp, #16
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fbed 	bl	8002408 <pvPortMalloc>
 8000c2e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d013      	beq.n	8000c5e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c36:	2054      	movs	r0, #84	@ 0x54
 8000c38:	f001 fbe6 	bl	8002408 <pvPortMalloc>
 8000c3c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d008      	beq.n	8000c56 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000c44:	2254      	movs	r2, #84	@ 0x54
 8000c46:	2100      	movs	r1, #0
 8000c48:	69f8      	ldr	r0, [r7, #28]
 8000c4a:	f005 fe27 	bl	800689c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c54:	e005      	b.n	8000c62 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f001 fc92 	bl	8002580 <vPortFree>
 8000c5c:	e001      	b.n	8000c62 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d013      	beq.n	8000c90 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c68:	88fa      	ldrh	r2, [r7, #6]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9303      	str	r3, [sp, #12]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f000 f80e 	bl	8000ca0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000c84:	69f8      	ldr	r0, [r7, #28]
 8000c86:	f000 f893 	bl	8000db0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	e002      	b.n	8000c96 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c94:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000c96:	69bb      	ldr	r3, [r7, #24]
    }
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	f023 0307 	bic.w	r3, r3, #7
 8000cc6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00b      	beq.n	8000cea <prvInitialiseNewTask+0x4a>
        __asm volatile
 8000cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd6:	f383 8811 	msr	BASEPRI, r3
 8000cda:	f3bf 8f6f 	isb	sy
 8000cde:	f3bf 8f4f 	dsb	sy
 8000ce2:	617b      	str	r3, [r7, #20]
    }
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	e7fd      	b.n	8000ce6 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d01e      	beq.n	8000d2e <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	e012      	b.n	8000d1c <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	7819      	ldrb	r1, [r3, #0]
 8000cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	4413      	add	r3, r2
 8000d04:	3334      	adds	r3, #52	@ 0x34
 8000d06:	460a      	mov	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	d9e9      	bls.n	8000cf6 <prvInitialiseNewTask+0x56>
 8000d22:	e000      	b.n	8000d26 <prvInitialiseNewTask+0x86>
            {
                break;
 8000d24:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d90b      	bls.n	8000d4c <prvInitialiseNewTask+0xac>
        __asm volatile
 8000d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d38:	f383 8811 	msr	BASEPRI, r3
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	f3bf 8f4f 	dsb	sy
 8000d44:	613b      	str	r3, [r7, #16]
    }
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <prvInitialiseNewTask+0xa8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d901      	bls.n	8000d56 <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d52:	2304      	movs	r3, #4
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d64:	3304      	adds	r3, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc40 	bl	80005ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d6e:	3318      	adds	r3, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fc3b 	bl	80005ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d7a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7e:	f1c3 0205 	rsb	r2, r3, #5
 8000d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d84:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	69b8      	ldr	r0, [r7, #24]
 8000d92:	f001 f929 	bl	8001fe8 <pxPortInitialiseStack>
 8000d96:	4602      	mov	r2, r0
 8000d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d9a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000da6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000db8:	f001 fa48 	bl	800224c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb8 <prvAddNewTaskToReadyList+0x108>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8000eb8 <prvAddNewTaskToReadyList+0x108>)
 8000dc4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ebc <prvAddNewTaskToReadyList+0x10c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000dce:	4a3b      	ldr	r2, [pc, #236]	@ (8000ebc <prvAddNewTaskToReadyList+0x10c>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dd4:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <prvAddNewTaskToReadyList+0x108>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d110      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ddc:	f000 fdba 	bl	8001954 <prvInitialiseTaskLists>
 8000de0:	e00d      	b.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000de2:	4b37      	ldr	r3, [pc, #220]	@ (8000ec0 <prvAddNewTaskToReadyList+0x110>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dea:	4b34      	ldr	r3, [pc, #208]	@ (8000ebc <prvAddNewTaskToReadyList+0x10c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d802      	bhi.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000df8:	4a30      	ldr	r2, [pc, #192]	@ (8000ebc <prvAddNewTaskToReadyList+0x10c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000e06:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e1e:	492b      	ldr	r1, [pc, #172]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	3204      	adds	r2, #4
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	1d1a      	adds	r2, r3, #4
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000e5e:	441a      	add	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e68:	4918      	ldr	r1, [pc, #96]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1c59      	adds	r1, r3, #1
 8000e78:	4814      	ldr	r0, [pc, #80]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4403      	add	r3, r0
 8000e84:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000e86:	f001 fa13 	bl	80022b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <prvAddNewTaskToReadyList+0x110>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00e      	beq.n	8000eb0 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <prvAddNewTaskToReadyList+0x10c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <prvAddNewTaskToReadyList+0x120>)
 8000ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000134 	.word	0x20000134
 8000ebc:	20000088 	.word	0x20000088
 8000ec0:	20000140 	.word	0x20000140
 8000ec4:	20000150 	.word	0x20000150
 8000ec8:	2000013c 	.word	0x2000013c
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	e000ed04 	.word	0xe000ed04

08000ed4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10b      	bne.n	8000f00 <xTaskDelayUntil+0x2c>
        __asm volatile
 8000ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eec:	f383 8811 	msr	BASEPRI, r3
 8000ef0:	f3bf 8f6f 	isb	sy
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	617b      	str	r3, [r7, #20]
    }
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10b      	bne.n	8000f1e <xTaskDelayUntil+0x4a>
        __asm volatile
 8000f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	613b      	str	r3, [r7, #16]
    }
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	e7fd      	b.n	8000f1a <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <xTaskDelayUntil+0xf8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00b      	beq.n	8000f3e <xTaskDelayUntil+0x6a>
        __asm volatile
 8000f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f2a:	f383 8811 	msr	BASEPRI, r3
 8000f2e:	f3bf 8f6f 	isb	sy
 8000f32:	f3bf 8f4f 	dsb	sy
 8000f36:	60fb      	str	r3, [r7, #12]
    }
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	e7fd      	b.n	8000f3a <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 8000f3e:	f000 f89d 	bl	800107c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <xTaskDelayUntil+0xfc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a3a      	ldr	r2, [r7, #32]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d20b      	bcs.n	8000f74 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d211      	bcs.n	8000f8a <xTaskDelayUntil+0xb6>
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d90d      	bls.n	8000f8a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f72:	e00a      	b.n	8000f8a <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d303      	bcc.n	8000f86 <xTaskDelayUntil+0xb2>
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d901      	bls.n	8000f8a <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8000f86:	2301      	movs	r3, #1
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fd50 	bl	8001a44 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000fa4:	f000 f878 	bl	8001098 <xTaskResumeAll>
 8000fa8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d107      	bne.n	8000fc0 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <xTaskDelayUntil+0x100>)
 8000fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000015c 	.word	0x2000015c
 8000fd0:	20000138 	.word	0x20000138
 8000fd4:	e000ed04 	.word	0xe000ed04

08000fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000fde:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <vTaskStartScheduler+0x88>)
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2278      	movs	r2, #120	@ 0x78
 8000fea:	491e      	ldr	r1, [pc, #120]	@ (8001064 <vTaskStartScheduler+0x8c>)
 8000fec:	481e      	ldr	r0, [pc, #120]	@ (8001068 <vTaskStartScheduler+0x90>)
 8000fee:	f7ff fe11 	bl	8000c14 <xTaskCreate>
 8000ff2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d102      	bne.n	8001000 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000ffa:	f000 fd77 	bl	8001aec <xTimerCreateTimerTask>
 8000ffe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d116      	bne.n	8001034 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800100a:	f383 8811 	msr	BASEPRI, r3
 800100e:	f3bf 8f6f 	isb	sy
 8001012:	f3bf 8f4f 	dsb	sy
 8001016:	60bb      	str	r3, [r7, #8]
    }
 8001018:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <vTaskStartScheduler+0x94>)
 800101c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001020:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <vTaskStartScheduler+0x98>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <vTaskStartScheduler+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800102e:	f001 f869 	bl	8002104 <xPortStartScheduler>
 8001032:	e00f      	b.n	8001054 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800103a:	d10b      	bne.n	8001054 <vTaskStartScheduler+0x7c>
        __asm volatile
 800103c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001040:	f383 8811 	msr	BASEPRI, r3
 8001044:	f3bf 8f6f 	isb	sy
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	607b      	str	r3, [r7, #4]
    }
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <vTaskStartScheduler+0xa0>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000158 	.word	0x20000158
 8001064:	080073d4 	.word	0x080073d4
 8001068:	08001925 	.word	0x08001925
 800106c:	20000154 	.word	0x20000154
 8001070:	20000140 	.word	0x20000140
 8001074:	20000138 	.word	0x20000138
 8001078:	080074f4 	.word	0x080074f4

0800107c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <vTaskSuspendAll+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a03      	ldr	r2, [pc, #12]	@ (8001094 <vTaskSuspendAll+0x18>)
 8001088:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	2000015c 	.word	0x2000015c

08001098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80010a6:	4b71      	ldr	r3, [pc, #452]	@ (800126c <xTaskResumeAll+0x1d4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10b      	bne.n	80010c6 <xTaskResumeAll+0x2e>
        __asm volatile
 80010ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b2:	f383 8811 	msr	BASEPRI, r3
 80010b6:	f3bf 8f6f 	isb	sy
 80010ba:	f3bf 8f4f 	dsb	sy
 80010be:	607b      	str	r3, [r7, #4]
    }
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	e7fd      	b.n	80010c2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80010c6:	f001 f8c1 	bl	800224c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80010ca:	4b68      	ldr	r3, [pc, #416]	@ (800126c <xTaskResumeAll+0x1d4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4a66      	ldr	r2, [pc, #408]	@ (800126c <xTaskResumeAll+0x1d4>)
 80010d2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010d4:	4b65      	ldr	r3, [pc, #404]	@ (800126c <xTaskResumeAll+0x1d4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 80c0 	bne.w	800125e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010de:	4b64      	ldr	r3, [pc, #400]	@ (8001270 <xTaskResumeAll+0x1d8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80bb 	beq.w	800125e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010e8:	e08a      	b.n	8001200 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010ea:	4b62      	ldr	r3, [pc, #392]	@ (8001274 <xTaskResumeAll+0x1dc>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	6a12      	ldr	r2, [r2, #32]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	69d2      	ldr	r2, [r2, #28]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	3318      	adds	r3, #24
 8001114:	429a      	cmp	r2, r3
 8001116:	d103      	bne.n	8001120 <xTaskResumeAll+0x88>
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	@ 0x28
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	68d2      	ldr	r2, [r2, #12]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	6892      	ldr	r2, [r2, #8]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	429a      	cmp	r2, r3
 8001154:	d103      	bne.n	800115e <xTaskResumeAll+0xc6>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	2201      	movs	r2, #1
 8001174:	409a      	lsls	r2, r3
 8001176:	4b40      	ldr	r3, [pc, #256]	@ (8001278 <xTaskResumeAll+0x1e0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4313      	orrs	r3, r2
 800117c:	4a3e      	ldr	r2, [pc, #248]	@ (8001278 <xTaskResumeAll+0x1e0>)
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001184:	493d      	ldr	r1, [pc, #244]	@ (800127c <xTaskResumeAll+0x1e4>)
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	3204      	adds	r2, #4
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	1d1a      	adds	r2, r3, #4
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4a2e      	ldr	r2, [pc, #184]	@ (800127c <xTaskResumeAll+0x1e4>)
 80011c4:	441a      	add	r2, r3
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ce:	492b      	ldr	r1, [pc, #172]	@ (800127c <xTaskResumeAll+0x1e4>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	1c59      	adds	r1, r3, #1
 80011de:	4827      	ldr	r0, [pc, #156]	@ (800127c <xTaskResumeAll+0x1e4>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4403      	add	r3, r0
 80011ea:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <xTaskResumeAll+0x1e8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d302      	bcc.n	8001200 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <xTaskResumeAll+0x1ec>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <xTaskResumeAll+0x1dc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f af70 	bne.w	80010ea <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001210:	f000 fbde 	bl	80019d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <xTaskResumeAll+0x1f0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d010      	beq.n	8001242 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001220:	f000 f846 	bl	80012b0 <xTaskIncrementTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <xTaskResumeAll+0x1ec>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3b01      	subs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f1      	bne.n	8001220 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <xTaskResumeAll+0x1f0>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <xTaskResumeAll+0x1ec>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <xTaskResumeAll+0x1f4>)
 8001250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	f3bf 8f4f 	dsb	sy
 800125a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800125e:	f001 f827 	bl	80022b0 <vPortExitCritical>

    return xAlreadyYielded;
 8001262:	69bb      	ldr	r3, [r7, #24]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000015c 	.word	0x2000015c
 8001270:	20000134 	.word	0x20000134
 8001274:	20000120 	.word	0x20000120
 8001278:	2000013c 	.word	0x2000013c
 800127c:	2000008c 	.word	0x2000008c
 8001280:	20000088 	.word	0x20000088
 8001284:	20000148 	.word	0x20000148
 8001288:	20000144 	.word	0x20000144
 800128c:	e000ed04 	.word	0xe000ed04

08001290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <xTaskGetTickCount+0x1c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000138 	.word	0x20000138

080012b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012ba:	4b7e      	ldr	r3, [pc, #504]	@ (80014b4 <xTaskIncrementTick+0x204>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 80ed 	bne.w	800149e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80012c4:	4b7c      	ldr	r3, [pc, #496]	@ (80014b8 <xTaskIncrementTick+0x208>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80012cc:	4a7a      	ldr	r2, [pc, #488]	@ (80014b8 <xTaskIncrementTick+0x208>)
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d121      	bne.n	800131c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80012d8:	4b78      	ldr	r3, [pc, #480]	@ (80014bc <xTaskIncrementTick+0x20c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <xTaskIncrementTick+0x4a>
        __asm volatile
 80012e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012e6:	f383 8811 	msr	BASEPRI, r3
 80012ea:	f3bf 8f6f 	isb	sy
 80012ee:	f3bf 8f4f 	dsb	sy
 80012f2:	607b      	str	r3, [r7, #4]
    }
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	e7fd      	b.n	80012f6 <xTaskIncrementTick+0x46>
 80012fa:	4b70      	ldr	r3, [pc, #448]	@ (80014bc <xTaskIncrementTick+0x20c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	4b6f      	ldr	r3, [pc, #444]	@ (80014c0 <xTaskIncrementTick+0x210>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a6d      	ldr	r2, [pc, #436]	@ (80014bc <xTaskIncrementTick+0x20c>)
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4a6d      	ldr	r2, [pc, #436]	@ (80014c0 <xTaskIncrementTick+0x210>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b6d      	ldr	r3, [pc, #436]	@ (80014c4 <xTaskIncrementTick+0x214>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a6b      	ldr	r2, [pc, #428]	@ (80014c4 <xTaskIncrementTick+0x214>)
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	f000 fb5a 	bl	80019d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800131c:	4b6a      	ldr	r3, [pc, #424]	@ (80014c8 <xTaskIncrementTick+0x218>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a3a      	ldr	r2, [r7, #32]
 8001322:	429a      	cmp	r2, r3
 8001324:	f0c0 80a6 	bcc.w	8001474 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001328:	4b64      	ldr	r3, [pc, #400]	@ (80014bc <xTaskIncrementTick+0x20c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d104      	bne.n	800133c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001332:	4b65      	ldr	r3, [pc, #404]	@ (80014c8 <xTaskIncrementTick+0x218>)
 8001334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001338:	601a      	str	r2, [r3, #0]
                    break;
 800133a:	e09b      	b.n	8001474 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800133c:	4b5f      	ldr	r3, [pc, #380]	@ (80014bc <xTaskIncrementTick+0x20c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800134c:	6a3a      	ldr	r2, [r7, #32]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	429a      	cmp	r2, r3
 8001352:	d203      	bcs.n	800135c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001354:	4a5c      	ldr	r2, [pc, #368]	@ (80014c8 <xTaskIncrementTick+0x218>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800135a:	e08b      	b.n	8001474 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	68d2      	ldr	r2, [r2, #12]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	6892      	ldr	r2, [r2, #8]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	3304      	adds	r3, #4
 800137e:	429a      	cmp	r2, r3
 8001380:	d103      	bne.n	800138a <xTaskIncrementTick+0xda>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	1e5a      	subs	r2, r3, #1
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d01e      	beq.n	80013e0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	6a12      	ldr	r2, [r2, #32]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	69d2      	ldr	r2, [r2, #28]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	3318      	adds	r3, #24
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d103      	bne.n	80013d0 <xTaskIncrementTick+0x120>
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e4:	2201      	movs	r2, #1
 80013e6:	409a      	lsls	r2, r3
 80013e8:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <xTaskIncrementTick+0x21c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	4a37      	ldr	r2, [pc, #220]	@ (80014cc <xTaskIncrementTick+0x21c>)
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f6:	4936      	ldr	r1, [pc, #216]	@ (80014d0 <xTaskIncrementTick+0x220>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	3204      	adds	r2, #4
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1d1a      	adds	r2, r3, #4
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4a26      	ldr	r2, [pc, #152]	@ (80014d0 <xTaskIncrementTick+0x220>)
 8001436:	441a      	add	r2, r3
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001440:	4923      	ldr	r1, [pc, #140]	@ (80014d0 <xTaskIncrementTick+0x220>)
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1c59      	adds	r1, r3, #1
 8001450:	481f      	ldr	r0, [pc, #124]	@ (80014d0 <xTaskIncrementTick+0x220>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4403      	add	r3, r0
 800145c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <xTaskIncrementTick+0x224>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	429a      	cmp	r2, r3
 800146a:	f67f af5d 	bls.w	8001328 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800146e:	2301      	movs	r3, #1
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001472:	e759      	b.n	8001328 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <xTaskIncrementTick+0x224>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800147a:	4915      	ldr	r1, [pc, #84]	@ (80014d0 <xTaskIncrementTick+0x220>)
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d901      	bls.n	8001490 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800148c:	2301      	movs	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <xTaskIncrementTick+0x228>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001498:	2301      	movs	r3, #1
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
 800149c:	e004      	b.n	80014a8 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <xTaskIncrementTick+0x22c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <xTaskIncrementTick+0x22c>)
 80014a6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000015c 	.word	0x2000015c
 80014b8:	20000138 	.word	0x20000138
 80014bc:	20000118 	.word	0x20000118
 80014c0:	2000011c 	.word	0x2000011c
 80014c4:	2000014c 	.word	0x2000014c
 80014c8:	20000154 	.word	0x20000154
 80014cc:	2000013c 	.word	0x2000013c
 80014d0:	2000008c 	.word	0x2000008c
 80014d4:	20000088 	.word	0x20000088
 80014d8:	20000148 	.word	0x20000148
 80014dc:	20000144 	.word	0x20000144

080014e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014e6:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <vTaskSwitchContext+0xa4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <vTaskSwitchContext+0xa8>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80014f4:	e040      	b.n	8001578 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80014f6:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <vTaskSwitchContext+0xa8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <vTaskSwitchContext+0xac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	f1c3 031f 	rsb	r3, r3, #31
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	491f      	ldr	r1, [pc, #124]	@ (8001590 <vTaskSwitchContext+0xb0>)
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10b      	bne.n	800153e <vTaskSwitchContext+0x5e>
        __asm volatile
 8001526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800152a:	f383 8811 	msr	BASEPRI, r3
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	607b      	str	r3, [r7, #4]
    }
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	e7fd      	b.n	800153a <vTaskSwitchContext+0x5a>
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4a11      	ldr	r2, [pc, #68]	@ (8001590 <vTaskSwitchContext+0xb0>)
 800154a:	4413      	add	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	3308      	adds	r3, #8
 8001560:	429a      	cmp	r2, r3
 8001562:	d104      	bne.n	800156e <vTaskSwitchContext+0x8e>
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <vTaskSwitchContext+0xb4>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	2000015c 	.word	0x2000015c
 8001588:	20000148 	.word	0x20000148
 800158c:	2000013c 	.word	0x2000013c
 8001590:	2000008c 	.word	0x2000008c
 8001594:	20000088 	.word	0x20000088

08001598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80015a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ac:	f383 8811 	msr	BASEPRI, r3
 80015b0:	f3bf 8f6f 	isb	sy
 80015b4:	f3bf 8f4f 	dsb	sy
 80015b8:	60fb      	str	r3, [r7, #12]
    }
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <vTaskPlaceOnEventList+0x48>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3318      	adds	r3, #24
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff f81c 	bl	8000606 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80015ce:	2101      	movs	r1, #1
 80015d0:	6838      	ldr	r0, [r7, #0]
 80015d2:	f000 fa37 	bl	8001a44 <prvAddCurrentTaskToDelayedList>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000088 	.word	0x20000088

080015e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10b      	bne.n	800160e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80015f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015fa:	f383 8811 	msr	BASEPRI, r3
 80015fe:	f3bf 8f6f 	isb	sy
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	613b      	str	r3, [r7, #16]
    }
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	e7fd      	b.n	800160a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <vTaskPlaceOnEventListRestricted+0x88>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	61da      	str	r2, [r3, #28]
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <vTaskPlaceOnEventListRestricted+0x88>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	6892      	ldr	r2, [r2, #8]
 8001624:	621a      	str	r2, [r3, #32]
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <vTaskPlaceOnEventListRestricted+0x88>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	3218      	adds	r2, #24
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <vTaskPlaceOnEventListRestricted+0x88>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f103 0218 	add.w	r2, r3, #24
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <vTaskPlaceOnEventListRestricted+0x88>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f000 f9f0 	bl	8001a44 <prvAddCurrentTaskToDelayedList>
    }
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000088 	.word	0x20000088

08001670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001670:	b480      	push	{r7}
 8001672:	b08b      	sub	sp, #44	@ 0x2c
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8001686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800168a:	f383 8811 	msr	BASEPRI, r3
 800168e:	f3bf 8f6f 	isb	sy
 8001692:	f3bf 8f4f 	dsb	sy
 8001696:	60fb      	str	r3, [r7, #12]
    }
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	e7fd      	b.n	800169a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	6a3a      	ldr	r2, [r7, #32]
 80016aa:	6a12      	ldr	r2, [r2, #32]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	6a3a      	ldr	r2, [r7, #32]
 80016b4:	69d2      	ldr	r2, [r2, #28]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	3318      	adds	r3, #24
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d103      	bne.n	80016cc <xTaskRemoveFromEventList+0x5c>
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001808 <xTaskRemoveFromEventList+0x198>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d15e      	bne.n	80017a2 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	6a3a      	ldr	r2, [r7, #32]
 80016f0:	68d2      	ldr	r2, [r2, #12]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	6a3a      	ldr	r2, [r7, #32]
 80016fa:	6892      	ldr	r2, [r2, #8]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	3304      	adds	r3, #4
 8001706:	429a      	cmp	r2, r3
 8001708:	d103      	bne.n	8001712 <xTaskRemoveFromEventList+0xa2>
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	2201      	movs	r2, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <xTaskRemoveFromEventList+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	4a36      	ldr	r2, [pc, #216]	@ (800180c <xTaskRemoveFromEventList+0x19c>)
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001738:	4935      	ldr	r1, [pc, #212]	@ (8001810 <xTaskRemoveFromEventList+0x1a0>)
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3304      	adds	r3, #4
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	6a3a      	ldr	r2, [r7, #32]
 800175e:	3204      	adds	r2, #4
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	1d1a      	adds	r2, r3, #4
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4a26      	ldr	r2, [pc, #152]	@ (8001810 <xTaskRemoveFromEventList+0x1a0>)
 8001778:	441a      	add	r2, r3
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001782:	4923      	ldr	r1, [pc, #140]	@ (8001810 <xTaskRemoveFromEventList+0x1a0>)
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1c59      	adds	r1, r3, #1
 8001792:	481f      	ldr	r0, [pc, #124]	@ (8001810 <xTaskRemoveFromEventList+0x1a0>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	6019      	str	r1, [r3, #0]
 80017a0:	e01b      	b.n	80017da <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <xTaskRemoveFromEventList+0x1a4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	61da      	str	r2, [r3, #28]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	621a      	str	r2, [r3, #32]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	3218      	adds	r2, #24
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	f103 0218 	add.w	r2, r3, #24
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <xTaskRemoveFromEventList+0x1a4>)
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80017d0:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <xTaskRemoveFromEventList+0x1a4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <xTaskRemoveFromEventList+0x1a4>)
 80017d8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <xTaskRemoveFromEventList+0x1a8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d905      	bls.n	80017f4 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <xTaskRemoveFromEventList+0x1ac>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e001      	b.n	80017f8 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	372c      	adds	r7, #44	@ 0x2c
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000015c 	.word	0x2000015c
 800180c:	2000013c 	.word	0x2000013c
 8001810:	2000008c 	.word	0x2000008c
 8001814:	20000120 	.word	0x20000120
 8001818:	20000088 	.word	0x20000088
 800181c:	20000148 	.word	0x20000148

08001820 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <vTaskInternalSetTimeOutState+0x24>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <vTaskInternalSetTimeOutState+0x28>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	2000014c 	.word	0x2000014c
 8001848:	20000138 	.word	0x20000138

0800184c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10b      	bne.n	8001874 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800185c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001860:	f383 8811 	msr	BASEPRI, r3
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	613b      	str	r3, [r7, #16]
    }
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10b      	bne.n	8001892 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800187a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	60fb      	str	r3, [r7, #12]
    }
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	e7fd      	b.n	800188e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001892:	f000 fcdb 	bl	800224c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <xTaskCheckForTimeOut+0xb8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <xTaskCheckForTimeOut+0xbc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d00a      	beq.n	80018c8 <xTaskCheckForTimeOut+0x7c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d305      	bcc.n	80018c8 <xTaskCheckForTimeOut+0x7c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018bc:	2301      	movs	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e015      	b.n	80018f4 <xTaskCheckForTimeOut+0xa8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20b      	bcs.n	80018ea <xTaskCheckForTimeOut+0x9e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1ad2      	subs	r2, r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff9e 	bl	8001820 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	e004      	b.n	80018f4 <xTaskCheckForTimeOut+0xa8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80018f4:	f000 fcdc 	bl	80022b0 <vPortExitCritical>

    return xReturn;
 80018f8:	69fb      	ldr	r3, [r7, #28]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000138 	.word	0x20000138
 8001908:	2000014c 	.word	0x2000014c

0800190c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <vTaskMissedYield+0x14>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	20000148 	.word	0x20000148

08001924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800192c:	f000 f848 	bl	80019c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <prvIdleTask+0x28>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d9f9      	bls.n	800192c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <prvIdleTask+0x2c>)
 800193a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f3bf 8f4f 	dsb	sy
 8001944:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001948:	e7f0      	b.n	800192c <prvIdleTask+0x8>
 800194a:	bf00      	nop
 800194c:	2000008c 	.word	0x2000008c
 8001950:	e000ed04 	.word	0xe000ed04

08001954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e00c      	b.n	800197a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <prvInitialiseTaskLists+0x54>)
 800196c:	4413      	add	r3, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe1c 	bl	80005ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d9ef      	bls.n	8001960 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001980:	480a      	ldr	r0, [pc, #40]	@ (80019ac <prvInitialiseTaskLists+0x58>)
 8001982:	f7fe fe13 	bl	80005ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001986:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <prvInitialiseTaskLists+0x5c>)
 8001988:	f7fe fe10 	bl	80005ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <prvInitialiseTaskLists+0x60>)
 800198e:	f7fe fe0d 	bl	80005ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <prvInitialiseTaskLists+0x64>)
 8001994:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <prvInitialiseTaskLists+0x58>)
 8001996:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <prvInitialiseTaskLists+0x68>)
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <prvInitialiseTaskLists+0x5c>)
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000008c 	.word	0x2000008c
 80019ac:	200000f0 	.word	0x200000f0
 80019b0:	20000104 	.word	0x20000104
 80019b4:	20000120 	.word	0x20000120
 80019b8:	20000118 	.word	0x20000118
 80019bc:	2000011c 	.word	0x2000011c

080019c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <prvResetNextTaskUnblockTime+0x30>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d104      	bne.n	80019e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <prvResetNextTaskUnblockTime+0x34>)
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80019e6:	e005      	b.n	80019f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <prvResetNextTaskUnblockTime+0x30>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <prvResetNextTaskUnblockTime+0x34>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000118 	.word	0x20000118
 8001a04:	20000154 	.word	0x20000154

08001a08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <xTaskGetSchedulerState+0x34>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001a16:	2301      	movs	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	e008      	b.n	8001a2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <xTaskGetSchedulerState+0x38>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001a24:	2302      	movs	r3, #2
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001a2e:	687b      	ldr	r3, [r7, #4]
    }
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	20000140 	.word	0x20000140
 8001a40:	2000015c 	.word	0x2000015c

08001a44 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <prvAddCurrentTaskToDelayedList+0x90>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fe0c 	bl	8000678 <uxListRemove>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <prvAddCurrentTaskToDelayedList+0x98>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <prvAddCurrentTaskToDelayedList+0x98>)
 8001a7c:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d209      	bcs.n	8001aaa <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	f7fe fdaf 	bl	8000606 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001aa8:	e010      	b.n	8001acc <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f7fe fda5 	bl	8000606 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d202      	bcs.n	8001acc <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000138 	.word	0x20000138
 8001ad8:	20000088 	.word	0x20000088
 8001adc:	2000013c 	.word	0x2000013c
 8001ae0:	2000011c 	.word	0x2000011c
 8001ae4:	20000118 	.word	0x20000118
 8001ae8:	20000154 	.word	0x20000154

08001aec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001af6:	f000 fa4d 	bl	8001f94 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <xTimerCreateTimerTask+0x54>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <xTimerCreateTimerTask+0x58>)
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2303      	movs	r3, #3
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2278      	movs	r2, #120	@ 0x78
 8001b0e:	490e      	ldr	r1, [pc, #56]	@ (8001b48 <xTimerCreateTimerTask+0x5c>)
 8001b10:	480e      	ldr	r0, [pc, #56]	@ (8001b4c <xTimerCreateTimerTask+0x60>)
 8001b12:	f7ff f87f 	bl	8000c14 <xTaskCreate>
 8001b16:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10b      	bne.n	8001b36 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b22:	f383 8811 	msr	BASEPRI, r3
 8001b26:	f3bf 8f6f 	isb	sy
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	603b      	str	r3, [r7, #0]
    }
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8001b36:	687b      	ldr	r3, [r7, #4]
    }
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000190 	.word	0x20000190
 8001b44:	20000194 	.word	0x20000194
 8001b48:	080073dc 	.word	0x080073dc
 8001b4c:	08001bf5 	.word	0x08001bf5

08001b50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001b5c:	e008      	b.n	8001b70 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	4413      	add	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	18d1      	adds	r1, r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f8df 	bl	8001d40 <prvInsertTimerInActiveList>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ea      	bne.n	8001b5e <prvReloadTimer+0xe>
        }
    }
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <prvProcessExpiredTimer+0x5c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fd63 	bl	8000678 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7ff ffc3 	bl	8001b50 <prvReloadTimer>
 8001bca:	e008      	b.n	8001bde <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	4798      	blx	r3
    }
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000188 	.word	0x20000188

08001bf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f859 	bl	8001cb8 <prvGetNextExpireTime>
 8001c06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f805 	bl	8001c1c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001c12:	f000 f8d7 	bl	8001dc4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001c16:	bf00      	nop
 8001c18:	e7f0      	b.n	8001bfc <prvTimerTask+0x8>
	...

08001c1c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001c26:	f7ff fa29 	bl	800107c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f866 	bl	8001d00 <prvSampleTimeNow>
 8001c34:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d130      	bne.n	8001c9e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <prvProcessTimerOrBlockTask+0x3c>
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d806      	bhi.n	8001c58 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001c4a:	f7ff fa25 	bl	8001098 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff9f 	bl	8001b94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001c56:	e024      	b.n	8001ca2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <prvProcessTimerOrBlockTask+0x90>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <prvProcessTimerOrBlockTask+0x50>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <prvProcessTimerOrBlockTask+0x52>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001c70:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <prvProcessTimerOrBlockTask+0x94>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff95 	bl	8000bac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001c82:	f7ff fa09 	bl	8001098 <xTaskResumeAll>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <prvProcessTimerOrBlockTask+0x98>)
 8001c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	f3bf 8f6f 	isb	sy
    }
 8001c9c:	e001      	b.n	8001ca2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001c9e:	f7ff f9fb 	bl	8001098 <xTaskResumeAll>
    }
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000018c 	.word	0x2000018c
 8001cb0:	20000190 	.word	0x20000190
 8001cb4:	e000ed04 	.word	0xe000ed04

08001cb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <prvGetNextExpireTime+0x44>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <prvGetNextExpireTime+0x16>
 8001cca:	2201      	movs	r2, #1
 8001ccc:	e000      	b.n	8001cd0 <prvGetNextExpireTime+0x18>
 8001cce:	2200      	movs	r2, #0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d105      	bne.n	8001ce8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001cdc:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <prvGetNextExpireTime+0x44>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e001      	b.n	8001cec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001cec:	68fb      	ldr	r3, [r7, #12]
    }
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000188 	.word	0x20000188

08001d00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001d08:	f7ff fac2 	bl	8001290 <xTaskGetTickCount>
 8001d0c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <prvSampleTimeNow+0x3c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d205      	bcs.n	8001d24 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001d18:	f000 f916 	bl	8001f48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e002      	b.n	8001d2a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <prvSampleTimeNow+0x3c>)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001d30:	68fb      	ldr	r3, [r7, #12]
    }
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000198 	.word	0x20000198

08001d40 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d812      	bhi.n	8001d8c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d302      	bcc.n	8001d7a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001d74:	2301      	movs	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e01b      	b.n	8001db2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <prvInsertTimerInActiveList+0x7c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3304      	adds	r3, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f7fe fc3e 	bl	8000606 <vListInsert>
 8001d8a:	e012      	b.n	8001db2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d206      	bcs.n	8001da2 <prvInsertTimerInActiveList+0x62>
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d302      	bcc.n	8001da2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e007      	b.n	8001db2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <prvInsertTimerInActiveList+0x80>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3304      	adds	r3, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7fe fc2a 	bl	8000606 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001db2:	697b      	ldr	r3, [r7, #20]
    }
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000018c 	.word	0x2000018c
 8001dc0:	20000188 	.word	0x20000188

08001dc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001dca:	e0a9      	b.n	8001f20 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f2c0 80a6 	blt.w	8001f20 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3304      	adds	r3, #4
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fc47 	bl	8000678 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff87 	bl	8001d00 <prvSampleTimeNow>
 8001df2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	f200 808e 	bhi.w	8001f1a <prvProcessReceivedCommands+0x156>
 8001dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <prvProcessReceivedCommands+0x40>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e29 	.word	0x08001e29
 8001e08:	08001e29 	.word	0x08001e29
 8001e0c:	08001e91 	.word	0x08001e91
 8001e10:	08001ea5 	.word	0x08001ea5
 8001e14:	08001ef1 	.word	0x08001ef1
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001e29 	.word	0x08001e29
 8001e20:	08001e91 	.word	0x08001e91
 8001e24:	08001ea5 	.word	0x08001ea5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	18d1      	adds	r1, r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	69f8      	ldr	r0, [r7, #28]
 8001e48:	f7ff ff7a 	bl	8001d40 <prvInsertTimerInActiveList>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d065      	beq.n	8001f1e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	4413      	add	r3, r2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	69f8      	ldr	r0, [r7, #28]
 8001e6e:	f7ff fe6f 	bl	8001b50 <prvReloadTimer>
 8001e72:	e008      	b.n	8001e86 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	69f8      	ldr	r0, [r7, #28]
 8001e8c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001e8e:	e046      	b.n	8001f1e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8001ea2:	e03d      	b.n	8001f20 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <prvProcessReceivedCommands+0x118>
        __asm volatile
 8001ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	617b      	str	r3, [r7, #20]
    }
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	18d1      	adds	r1, r2, r3
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	69f8      	ldr	r0, [r7, #28]
 8001eea:	f7ff ff29 	bl	8001d40 <prvInsertTimerInActiveList>
                        break;
 8001eee:	e017      	b.n	8001f20 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8001efe:	69f8      	ldr	r0, [r7, #28]
 8001f00:	f000 fb3e 	bl	8002580 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001f04:	e00c      	b.n	8001f20 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8001f18:	e002      	b.n	8001f20 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8001f1a:	bf00      	nop
 8001f1c:	e000      	b.n	8001f20 <prvProcessReceivedCommands+0x15c>
                        break;
 8001f1e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <prvProcessReceivedCommands+0x180>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f107 0108 	add.w	r1, r7, #8
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fcce 	bl	80008cc <xQueueReceive>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f af4a 	bne.w	8001dcc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000190 	.word	0x20000190

08001f48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f4e:	e009      	b.n	8001f64 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <prvSwitchTimerLists+0x44>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001f5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f5e:	6838      	ldr	r0, [r7, #0]
 8001f60:	f7ff fe18 	bl	8001b94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <prvSwitchTimerLists+0x44>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <prvSwitchTimerLists+0x44>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <prvSwitchTimerLists+0x48>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <prvSwitchTimerLists+0x44>)
 8001f7a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <prvSwitchTimerLists+0x48>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
    }
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000188 	.word	0x20000188
 8001f90:	2000018c 	.word	0x2000018c

08001f94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001f98:	f000 f958 	bl	800224c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <prvCheckForValidListAndQueue+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d113      	bne.n	8001fcc <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <prvCheckForValidListAndQueue+0x44>)
 8001fa6:	f7fe fb01 	bl	80005ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001faa:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <prvCheckForValidListAndQueue+0x48>)
 8001fac:	f7fe fafe 	bl	80005ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <prvCheckForValidListAndQueue+0x4c>)
 8001fb2:	4a09      	ldr	r2, [pc, #36]	@ (8001fd8 <prvCheckForValidListAndQueue+0x44>)
 8001fb4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <prvCheckForValidListAndQueue+0x50>)
 8001fb8:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <prvCheckForValidListAndQueue+0x48>)
 8001fba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	210c      	movs	r1, #12
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f7fe fc15 	bl	80007f0 <xQueueGenericCreate>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a02      	ldr	r2, [pc, #8]	@ (8001fd4 <prvCheckForValidListAndQueue+0x40>)
 8001fca:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001fcc:	f000 f970 	bl	80022b0 <vPortExitCritical>
    }
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000190 	.word	0x20000190
 8001fd8:	20000160 	.word	0x20000160
 8001fdc:	20000174 	.word	0x20000174
 8001fe0:	20000188 	.word	0x20000188
 8001fe4:	2000018c 	.word	0x2000018c

08001fe8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002000:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3b04      	subs	r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f023 0201 	bic.w	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3b04      	subs	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002018:	4a0c      	ldr	r2, [pc, #48]	@ (800204c <pxPortInitialiseStack+0x64>)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3b14      	subs	r3, #20
 8002022:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3b04      	subs	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f06f 0202 	mvn.w	r2, #2
 8002036:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3b20      	subs	r3, #32
 800203c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	08002051 	.word	0x08002051

08002050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800205a:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <prvTaskExitError+0x58>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002062:	d00b      	beq.n	800207c <prvTaskExitError+0x2c>
        __asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	60fb      	str	r3, [r7, #12]
    }
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <prvTaskExitError+0x28>
        __asm volatile
 800207c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	60bb      	str	r3, [r7, #8]
    }
 800208e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002090:	bf00      	nop
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0fc      	beq.n	8002092 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000
 80020ac:	00000000 	.word	0x00000000

080020b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80020b0:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <pxCurrentTCBConst2>)
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	6808      	ldr	r0, [r1, #0]
 80020b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ba:	f380 8809 	msr	PSP, r0
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f04f 0000 	mov.w	r0, #0
 80020c6:	f380 8811 	msr	BASEPRI, r0
 80020ca:	4770      	bx	lr
 80020cc:	f3af 8000 	nop.w

080020d0 <pxCurrentTCBConst2>:
 80020d0:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop

080020d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80020d8:	4808      	ldr	r0, [pc, #32]	@ (80020fc <prvPortStartFirstTask+0x24>)
 80020da:	6800      	ldr	r0, [r0, #0]
 80020dc:	6800      	ldr	r0, [r0, #0]
 80020de:	f380 8808 	msr	MSP, r0
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	f380 8814 	msr	CONTROL, r0
 80020ea:	b662      	cpsie	i
 80020ec:	b661      	cpsie	f
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	df00      	svc	0
 80020f8:	bf00      	nop
 80020fa:	0000      	.short	0x0000
 80020fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop

08002104 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800210a:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <xPortStartScheduler+0x124>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a47      	ldr	r2, [pc, #284]	@ (800222c <xPortStartScheduler+0x128>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d10b      	bne.n	800212c <xPortStartScheduler+0x28>
        __asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	60fb      	str	r3, [r7, #12]
    }
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800212c:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <xPortStartScheduler+0x124>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3f      	ldr	r2, [pc, #252]	@ (8002230 <xPortStartScheduler+0x12c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10b      	bne.n	800214e <xPortStartScheduler+0x4a>
        __asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	613b      	str	r3, [r7, #16]
    }
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	e7fd      	b.n	800214a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800214e:	4b39      	ldr	r3, [pc, #228]	@ (8002234 <xPortStartScheduler+0x130>)
 8002150:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	22ff      	movs	r2, #255	@ 0xff
 800215e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b31      	ldr	r3, [pc, #196]	@ (8002238 <xPortStartScheduler+0x134>)
 8002174:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002176:	4b31      	ldr	r3, [pc, #196]	@ (800223c <xPortStartScheduler+0x138>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800217c:	e009      	b.n	8002192 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800217e:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <xPortStartScheduler+0x138>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3b01      	subs	r3, #1
 8002184:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <xPortStartScheduler+0x138>)
 8002186:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	2b80      	cmp	r3, #128	@ 0x80
 800219c:	d0ef      	beq.n	800217e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800219e:	4b27      	ldr	r3, [pc, #156]	@ (800223c <xPortStartScheduler+0x138>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d00b      	beq.n	80021c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80021aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	60bb      	str	r3, [r7, #8]
    }
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	e7fd      	b.n	80021be <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <xPortStartScheduler+0x138>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <xPortStartScheduler+0x138>)
 80021ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <xPortStartScheduler+0x138>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <xPortStartScheduler+0x138>)
 80021d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <xPortStartScheduler+0x13c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a16      	ldr	r2, [pc, #88]	@ (8002240 <xPortStartScheduler+0x13c>)
 80021e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <xPortStartScheduler+0x13c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <xPortStartScheduler+0x13c>)
 80021f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80021f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80021f8:	f000 f8e0 	bl	80023bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <xPortStartScheduler+0x140>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002202:	f000 f8f5 	bl	80023f0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <xPortStartScheduler+0x144>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0f      	ldr	r2, [pc, #60]	@ (8002248 <xPortStartScheduler+0x144>)
 800220c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002210:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002212:	f7ff ff61 	bl	80020d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002216:	f7ff f963 	bl	80014e0 <vTaskSwitchContext>
    prvTaskExitError();
 800221a:	f7ff ff19 	bl	8002050 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	e000ed00 	.word	0xe000ed00
 800222c:	410fc271 	.word	0x410fc271
 8002230:	410fc270 	.word	0x410fc270
 8002234:	e000e400 	.word	0xe000e400
 8002238:	2000019c 	.word	0x2000019c
 800223c:	200001a0 	.word	0x200001a0
 8002240:	e000ed20 	.word	0xe000ed20
 8002244:	20000000 	.word	0x20000000
 8002248:	e000ef34 	.word	0xe000ef34

0800224c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
        __asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	607b      	str	r3, [r7, #4]
    }
 8002264:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <vPortEnterCritical+0x5c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a0e      	ldr	r2, [pc, #56]	@ (80022a8 <vPortEnterCritical+0x5c>)
 800226e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <vPortEnterCritical+0x5c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d110      	bne.n	800229a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <vPortEnterCritical+0x60>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <vPortEnterCritical+0x4e>
        __asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	603b      	str	r3, [r7, #0]
    }
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	e7fd      	b.n	8002296 <vPortEnterCritical+0x4a>
    }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000000 	.word	0x20000000
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <vPortExitCritical+0x50>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <vPortExitCritical+0x26>
        __asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	607b      	str	r3, [r7, #4]
    }
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	e7fd      	b.n	80022d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <vPortExitCritical+0x50>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3b01      	subs	r3, #1
 80022dc:	4a08      	ldr	r2, [pc, #32]	@ (8002300 <vPortExitCritical+0x50>)
 80022de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80022e0:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <vPortExitCritical+0x50>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <vPortExitCritical+0x44>
 80022e8:	2300      	movs	r3, #0
 80022ea:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80022f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20000000 	.word	0x20000000
	...

08002310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002310:	f3ef 8009 	mrs	r0, PSP
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <pxCurrentTCBConst>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	f01e 0f10 	tst.w	lr, #16
 8002320:	bf08      	it	eq
 8002322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800232a:	6010      	str	r0, [r2, #0]
 800232c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002334:	f380 8811 	msr	BASEPRI, r0
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f7ff f8ce 	bl	80014e0 <vTaskSwitchContext>
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	f380 8811 	msr	BASEPRI, r0
 800234c:	bc09      	pop	{r0, r3}
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	6808      	ldr	r0, [r1, #0]
 8002352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002356:	f01e 0f10 	tst.w	lr, #16
 800235a:	bf08      	it	eq
 800235c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002360:	f380 8809 	msr	PSP, r0
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w

08002370 <pxCurrentTCBConst>:
 8002370:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop

08002378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
        __asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	607b      	str	r3, [r7, #4]
    }
 8002390:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002392:	f7fe ff8d 	bl	80012b0 <xTaskIncrementTick>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <SysTick_Handler+0x40>)
 800239e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f383 8811 	msr	BASEPRI, r3
    }
 80023ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <vPortSetupTimerInterrupt+0x28>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <vPortSetupTimerInterrupt+0x2c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023cc:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <vPortSetupTimerInterrupt+0x30>)
 80023ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80023d2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <vPortSetupTimerInterrupt+0x28>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e010 	.word	0xe000e010
 80023e8:	e000e018 	.word	0xe000e018
 80023ec:	e000e014 	.word	0xe000e014

080023f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80023f0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002400 <vPortEnableVFP+0x10>
 80023f4:	6801      	ldr	r1, [r0, #0]
 80023f6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80023fa:	6001      	str	r1, [r0, #0]
 80023fc:	4770      	bx	lr
 80023fe:	0000      	.short	0x0000
 8002400:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop

08002408 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002414:	f7fe fe32 	bl	800107c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002418:	4b54      	ldr	r3, [pc, #336]	@ (800256c <pvPortMalloc+0x164>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002420:	f000 f908 	bl	8002634 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d012      	beq.n	8002450 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800242a:	2208      	movs	r2, #8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	3308      	adds	r3, #8
 8002436:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	43db      	mvns	r3, r3
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d804      	bhi.n	800244c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4413      	add	r3, r2
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	e001      	b.n	8002450 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db71      	blt.n	800253a <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d06e      	beq.n	800253a <pvPortMalloc+0x132>
 800245c:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <pvPortMalloc+0x168>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d869      	bhi.n	800253a <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002466:	4b43      	ldr	r3, [pc, #268]	@ (8002574 <pvPortMalloc+0x16c>)
 8002468:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800246a:	4b42      	ldr	r3, [pc, #264]	@ (8002574 <pvPortMalloc+0x16c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002470:	e004      	b.n	800247c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	429a      	cmp	r2, r3
 8002484:	d903      	bls.n	800248e <pvPortMalloc+0x86>
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f1      	bne.n	8002472 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800248e:	4b37      	ldr	r3, [pc, #220]	@ (800256c <pvPortMalloc+0x164>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002494:	429a      	cmp	r2, r3
 8002496:	d050      	beq.n	800253a <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2208      	movs	r2, #8
 800249e:	4413      	add	r3, r2
 80024a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	1ad2      	subs	r2, r2, r3
 80024b2:	2308      	movs	r3, #8
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d920      	bls.n	80024fc <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <pvPortMalloc+0xdc>
        __asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	613b      	str	r3, [r7, #16]
    }
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f000 f8f8 	bl	80026ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <pvPortMalloc+0x168>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	4a1a      	ldr	r2, [pc, #104]	@ (8002570 <pvPortMalloc+0x168>)
 8002508:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800250a:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <pvPortMalloc+0x168>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <pvPortMalloc+0x170>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d203      	bcs.n	800251e <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <pvPortMalloc+0x168>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a17      	ldr	r2, [pc, #92]	@ (8002578 <pvPortMalloc+0x170>)
 800251c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002530:	4b12      	ldr	r3, [pc, #72]	@ (800257c <pvPortMalloc+0x174>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a11      	ldr	r2, [pc, #68]	@ (800257c <pvPortMalloc+0x174>)
 8002538:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800253a:	f7fe fdad 	bl	8001098 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <pvPortMalloc+0x158>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	60fb      	str	r3, [r7, #12]
    }
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <pvPortMalloc+0x154>
    return pvReturn;
 8002560:	69fb      	ldr	r3, [r7, #28]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3728      	adds	r7, #40	@ 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200029ac 	.word	0x200029ac
 8002570:	200029b0 	.word	0x200029b0
 8002574:	200029a4 	.word	0x200029a4
 8002578:	200029b4 	.word	0x200029b4
 800257c:	200029b8 	.word	0x200029b8

08002580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d047      	beq.n	8002622 <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002592:	2308      	movs	r3, #8
 8002594:	425b      	negs	r3, r3
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4413      	add	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0b      	blt.n	80025c0 <vPortFree+0x40>
        __asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	60fb      	str	r3, [r7, #12]
    }
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <vPortFree+0x60>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	60bb      	str	r3, [r7, #8]
    }
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	da1c      	bge.n	8002622 <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d118      	bne.n	8002622 <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80025fc:	f7fe fd3e 	bl	800107c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <vPortFree+0xac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	4a08      	ldr	r2, [pc, #32]	@ (800262c <vPortFree+0xac>)
 800260c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800260e:	6938      	ldr	r0, [r7, #16]
 8002610:	f000 f86c 	bl	80026ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <vPortFree+0xb0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <vPortFree+0xb0>)
 800261c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800261e:	f7fe fd3b 	bl	8001098 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200029b0 	.word	0x200029b0
 8002630:	200029bc 	.word	0x200029bc

08002634 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800263a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800263e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002640:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <prvHeapInit+0xa4>)
 8002642:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3307      	adds	r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0307 	bic.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	4a1d      	ldr	r2, [pc, #116]	@ (80026d8 <prvHeapInit+0xa4>)
 8002664:	4413      	add	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800266c:	4a1b      	ldr	r2, [pc, #108]	@ (80026dc <prvHeapInit+0xa8>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002672:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <prvHeapInit+0xa8>)
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4413      	add	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002680:	2208      	movs	r2, #8
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0307 	bic.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a13      	ldr	r2, [pc, #76]	@ (80026e0 <prvHeapInit+0xac>)
 8002694:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <prvHeapInit+0xac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <prvHeapInit+0xac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <prvHeapInit+0xac>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a08      	ldr	r2, [pc, #32]	@ (80026e4 <prvHeapInit+0xb0>)
 80026c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <prvHeapInit+0xb4>)
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	200001a4 	.word	0x200001a4
 80026dc:	200029a4 	.word	0x200029a4
 80026e0:	200029ac 	.word	0x200029ac
 80026e4:	200029b4 	.word	0x200029b4
 80026e8:	200029b0 	.word	0x200029b0

080026ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80026f4:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <prvInsertBlockIntoFreeList+0xac>)
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e002      	b.n	8002700 <prvInsertBlockIntoFreeList+0x14>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d8f7      	bhi.n	80026fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4413      	add	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d108      	bne.n	800272e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	441a      	add	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	441a      	add	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d118      	bne.n	8002774 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <prvInsertBlockIntoFreeList+0xb0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d00d      	beq.n	800276a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e008      	b.n	800277c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800276a:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <prvInsertBlockIntoFreeList+0xb0>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e003      	b.n	800277c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d002      	beq.n	800278a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	200029a4 	.word	0x200029a4
 800279c:	200029ac 	.word	0x200029ac

080027a0 <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 80027b4:	1c59      	adds	r1, r3, #1
 80027b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002830 <circ_buffer_enqueue+0x90>)
 80027b8:	fb83 2301 	smull	r2, r3, r3, r1
 80027bc:	105a      	asrs	r2, r3, #1
 80027be:	17cb      	asrs	r3, r1, #31
 80027c0:	1ad2      	subs	r2, r2, r3
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	1aca      	subs	r2, r1, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d029      	beq.n	8002828 <circ_buffer_enqueue+0x88>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 80027da:	461a      	mov	r2, r3
 80027dc:	23f5      	movs	r3, #245	@ 0xf5
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	79fa      	ldrb	r2, [r7, #7]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 f8d1 	bl	8006992 <memcpy>
	cb->elementSizes[cb->end] = size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	79fa      	ldrb	r2, [r7, #7]
 80027fe:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <circ_buffer_enqueue+0x90>)
 800280c:	fb83 1302 	smull	r1, r3, r3, r2
 8002810:	1059      	asrs	r1, r3, #1
 8002812:	17d3      	asrs	r3, r2, #31
 8002814:	1ac9      	subs	r1, r1, r3
 8002816:	460b      	mov	r3, r1
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	1ad1      	subs	r1, r2, r3
 800281e:	b2ca      	uxtb	r2, r1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f883 24ca 	strb.w	r2, [r3, #1226]	@ 0x4ca
 8002826:	e000      	b.n	800282a <circ_buffer_enqueue+0x8a>
		return;
 8002828:	bf00      	nop
}
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	66666667 	.word	0x66666667

08002834 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 8002844:	461a      	mov	r2, r3
 8002846:	23f5      	movs	r3, #245	@ 0xf5
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
	if (size)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d009      	beq.n	800286c <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 800285e:	461a      	mov	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	f893 24cb 	ldrb.w	r2, [r3, #1227]	@ 0x4cb
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <circ_buffer_dequeue+0x6c>)
 8002876:	fb83 1302 	smull	r1, r3, r3, r2
 800287a:	1059      	asrs	r1, r3, #1
 800287c:	17d3      	asrs	r3, r2, #31
 800287e:	1ac9      	subs	r1, r1, r3
 8002880:	460b      	mov	r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	1ad1      	subs	r1, r2, r3
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f883 24c9 	strb.w	r2, [r3, #1225]	@ 0x4c9
	return element;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	66666667 	.word	0x66666667

080028a4 <circ_buffer_getNextSize>:
 * @param 	cb		: 	Pointer to the circular buffer
 *
 * @return 	Number	: 	of arrays in the buffer
 */
uint8_t circ_buffer_getNextSize(circ_buffer_t *cb)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	if (cb->start == cb->end)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 24c9 	ldrb.w	r2, [r3, #1225]	@ 0x4c9
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d101      	bne.n	80028c0 <circ_buffer_getNextSize+0x1c>
	{
		return 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	e007      	b.n	80028d0 <circ_buffer_getNextSize+0x2c>
	}
	else
	{
		return cb->elementSizes[cb->start];
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 80028c6:	461a      	mov	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
	}
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <e22_lora_init>:
					void* transmissionFunc,
					void* receptionFunc,
					void* receptionCallbackFunc,
					void* configModeFunc,
					void* TransceiverModeFunc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
	hE22.huart 						= huart;
 80028ea:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <e22_lora_init+0x64>)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6013      	str	r3, [r2, #0]
	hE22.loraTransmit 				= transmissionFunc;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4a13      	ldr	r2, [pc, #76]	@ (8002940 <e22_lora_init+0x64>)
 80028f4:	6053      	str	r3, [r2, #4]
	hE22.loraStartReception 		= receptionFunc;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a11      	ldr	r2, [pc, #68]	@ (8002940 <e22_lora_init+0x64>)
 80028fa:	6093      	str	r3, [r2, #8]
	hE22.loraReceive		 		= receptionCallbackFunc;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4a10      	ldr	r2, [pc, #64]	@ (8002940 <e22_lora_init+0x64>)
 8002900:	60d3      	str	r3, [r2, #12]
	hE22.loraConfigurationMode 		= configModeFunc;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4a0e      	ldr	r2, [pc, #56]	@ (8002940 <e22_lora_init+0x64>)
 8002906:	6153      	str	r3, [r2, #20]
	hE22.loraTransceiverMode		= TransceiverModeFunc;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <e22_lora_init+0x64>)
 800290c:	6113      	str	r3, [r2, #16]

	//Assign DMA buffer pointers.
	hE22.pRxDmaBuffer = rxDmaBuffer;
 800290e:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <e22_lora_init+0x64>)
 8002910:	4a0c      	ldr	r2, [pc, #48]	@ (8002944 <e22_lora_init+0x68>)
 8002912:	f8c3 2ab0 	str.w	r2, [r3, #2736]	@ 0xab0
	hE22.pTxDmaBuffer = txDmaBuffer;
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <e22_lora_init+0x64>)
 8002918:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <e22_lora_init+0x6c>)
 800291a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	@ 0xab4
	//transceiver mode as default
	hE22.loraTransceiverMode();
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <e22_lora_init+0x64>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4798      	blx	r3

	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <e22_lora_init+0x64>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <e22_lora_init+0x64>)
 800292a:	6810      	ldr	r0, [r2, #0]
 800292c:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <e22_lora_init+0x64>)
 800292e:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	@ 0xab0
 8002932:	22f0      	movs	r2, #240	@ 0xf0
 8002934:	4798      	blx	r3
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200029c0 	.word	0x200029c0
 8002944:	20003478 	.word	0x20003478
 8002948:	20003568 	.word	0x20003568

0800294c <e22_lora_transnit>:
 *
 * @param channel	:	RF channel to send data over
 *
 */
void e22_lora_transnit(uint8_t *pData, uint16_t size, uint16_t address, uint8_t channel)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	817b      	strh	r3, [r7, #10]
 800295e:	460b      	mov	r3, r1
 8002960:	813b      	strh	r3, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	71fb      	strb	r3, [r7, #7]
	const uint8_t overheadSize = 3;
 8002966:	2303      	movs	r3, #3
 8002968:	75fb      	strb	r3, [r7, #23]

	memset(&hE22.packet, 0, sizeof(e22_packet_t));
 800296a:	22f4      	movs	r2, #244	@ 0xf4
 800296c:	2100      	movs	r1, #0
 800296e:	4815      	ldr	r0, [pc, #84]	@ (80029c4 <e22_lora_transnit+0x78>)
 8002970:	f003 ff94 	bl	800689c <memset>
	//Address 2 bytes swap
	hE22.packet.address = (address >> 8) | (address << 8);
 8002974:	893b      	ldrh	r3, [r7, #8]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29b      	uxth	r3, r3
 800297a:	b21a      	sxth	r2, r3
 800297c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	b21b      	sxth	r3, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	b21b      	sxth	r3, r3
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <e22_lora_transnit+0x7c>)
 800298c:	831a      	strh	r2, [r3, #24]

	hE22.packet.chanel = channel;
 800298e:	4a0e      	ldr	r2, [pc, #56]	@ (80029c8 <e22_lora_transnit+0x7c>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	7693      	strb	r3, [r2, #26]

	hE22.txPortReady = true;
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <e22_lora_transnit+0x7c>)
 8002996:	2201      	movs	r2, #1
 8002998:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

	memcpy(&hE22.packet.dataBuffer, pData, size);
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	461a      	mov	r2, r3
 80029a0:	68f9      	ldr	r1, [r7, #12]
 80029a2:	480a      	ldr	r0, [pc, #40]	@ (80029cc <e22_lora_transnit+0x80>)
 80029a4:	f003 fff5 	bl	8006992 <memcpy>

	circ_buffer_enqueue(&hE22.txBuffer, (uint8_t*)&hE22.packet, size + overheadSize);
 80029a8:	897b      	ldrh	r3, [r7, #10]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	4413      	add	r3, r2
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	4903      	ldr	r1, [pc, #12]	@ (80029c4 <e22_lora_transnit+0x78>)
 80029b6:	4806      	ldr	r0, [pc, #24]	@ (80029d0 <e22_lora_transnit+0x84>)
 80029b8:	f7ff fef2 	bl	80027a0 <circ_buffer_enqueue>
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	200029d8 	.word	0x200029d8
 80029c8:	200029c0 	.word	0x200029c0
 80029cc:	200029db 	.word	0x200029db
 80029d0:	20002ace 	.word	0x20002ace

080029d4 <e22_lora_manager>:
 * 			This function manages the E22 LoRa module by checking for packets in the TX circular buffer, dequeuing them, and transmitting
 * 			them via the E22 module.
 *
 */
void e22_lora_manager(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
	uint8_t packetSize = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	70fb      	strb	r3, [r7, #3]
	uint8_t* pPacket = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
	//check for packet in TX circular buffer
	if(circ_buffer_getNextSize(&hE22.txBuffer))
 80029e2:	481e      	ldr	r0, [pc, #120]	@ (8002a5c <e22_lora_manager+0x88>)
 80029e4:	f7ff ff5e 	bl	80028a4 <circ_buffer_getNextSize>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01f      	beq.n	8002a2e <e22_lora_manager+0x5a>
	{
//		uint8_t packetSize = 0;
//		uint8_t* pPacket = NULL;
		if(hE22.txPortReady)
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <e22_lora_manager+0x8c>)
 80029f0:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01a      	beq.n	8002a2e <e22_lora_manager+0x5a>
		{
			hE22.txPortReady = false;
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <e22_lora_manager+0x8c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
			// Dequeue packet from circular buffer
			pPacket = circ_buffer_dequeue(&hE22.txBuffer, &packetSize);
 8002a00:	1cfb      	adds	r3, r7, #3
 8002a02:	4619      	mov	r1, r3
 8002a04:	4815      	ldr	r0, [pc, #84]	@ (8002a5c <e22_lora_manager+0x88>)
 8002a06:	f7ff ff15 	bl	8002834 <circ_buffer_dequeue>
 8002a0a:	6078      	str	r0, [r7, #4]
			// Copy packet to DMA buffer
			memcpy(hE22.pTxDmaBuffer ,pPacket, packetSize);
 8002a0c:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <e22_lora_manager+0x8c>)
 8002a0e:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	@ 0xab4
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 ffbb 	bl	8006992 <memcpy>
			// Transmit packet via the E22 module
			hE22.loraTransmit(hE22.huart, hE22.pTxDmaBuffer, packetSize);
 8002a1c:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <e22_lora_manager+0x8c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a0f      	ldr	r2, [pc, #60]	@ (8002a60 <e22_lora_manager+0x8c>)
 8002a22:	6810      	ldr	r0, [r2, #0]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	@ (8002a60 <e22_lora_manager+0x8c>)
 8002a26:	f8d2 1ab4 	ldr.w	r1, [r2, #2740]	@ 0xab4
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	4798      	blx	r3
		}
	}
	//check for packet in RX circular buffer
	if(circ_buffer_getNextSize(&hE22.rxBuffer))
 8002a2e:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <e22_lora_manager+0x90>)
 8002a30:	f7ff ff38 	bl	80028a4 <circ_buffer_getNextSize>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <e22_lora_manager+0x7e>
	{
		pPacket = circ_buffer_dequeue(&hE22.rxBuffer, &packetSize);
 8002a3a:	1cfb      	adds	r3, r7, #3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4809      	ldr	r0, [pc, #36]	@ (8002a64 <e22_lora_manager+0x90>)
 8002a40:	f7ff fef8 	bl	8002834 <circ_buffer_dequeue>
 8002a44:	6078      	str	r0, [r7, #4]
		hE22.loraReceive(pPacket, packetSize);
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <e22_lora_manager+0x8c>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
	}
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20002ace 	.word	0x20002ace
 8002a60:	200029c0 	.word	0x200029c0
 8002a64:	20002f9e 	.word	0x20002f9e

08002a68 <e22_lora_make_ready>:
/**
 * @brief 	Make transmission line status ready at TX complete callback
 *
 */
void e22_lora_make_ready(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
	hE22.txPortReady = true;
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <e22_lora_make_ready+0x18>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	200029c0 	.word	0x200029c0

08002a84 <e22_lora_reception_complete>:
/**
 * @brief 	this function should be called at the UART RX complete callback.
 *
 */
void e22_lora_reception_complete(uint8_t size)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
	circ_buffer_enqueue(&hE22.rxBuffer, (uint8_t*)hE22.pRxDmaBuffer, size);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <e22_lora_reception_complete+0x34>)
 8002a90:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	@ 0xab0
 8002a94:	79fa      	ldrb	r2, [r7, #7]
 8002a96:	4619      	mov	r1, r3
 8002a98:	4808      	ldr	r0, [pc, #32]	@ (8002abc <e22_lora_reception_complete+0x38>)
 8002a9a:	f7ff fe81 	bl	80027a0 <circ_buffer_enqueue>
	//Activate UART reception again
	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <e22_lora_reception_complete+0x34>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <e22_lora_reception_complete+0x34>)
 8002aa4:	6810      	ldr	r0, [r2, #0]
 8002aa6:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <e22_lora_reception_complete+0x34>)
 8002aa8:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	@ 0xab0
 8002aac:	22f0      	movs	r2, #240	@ 0xf0
 8002aae:	4798      	blx	r3
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200029c0 	.word	0x200029c0
 8002abc:	20002f9e 	.word	0x20002f9e

08002ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ac6:	f000 fced 	bl	80034a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aca:	f000 f851 	bl	8002b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ace:	f000 f909 	bl	8002ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ad2:	f000 f8df 	bl	8002c94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002ad6:	f000 f8b3 	bl	8002c40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Initialize e22 LoRa module
  e22_lora_init(&huart2,
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <main+0x7c>)
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <main+0x80>)
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <main+0x84>)
 8002ae4:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <main+0x88>)
 8002ae6:	4919      	ldr	r1, [pc, #100]	@ (8002b4c <main+0x8c>)
 8002ae8:	4819      	ldr	r0, [pc, #100]	@ (8002b50 <main+0x90>)
 8002aea:	f7ff fef7 	bl	80028dc <e22_lora_init>
				HAL_UARTEx_ReceiveToIdle_DMA,
				main_lora_packet_receive,
				main_e22_configurationMode,
				main_e22_transceiverMode);

  printf("E22 LoRa module initialized.\r\n");
 8002aee:	4819      	ldr	r0, [pc, #100]	@ (8002b54 <main+0x94>)
 8002af0:	f003 fde4 	bl	80066bc <puts>
  //Start FreeRTOS task creation
  xTaskCreate(led_toggle_task, "Toggle GPIO13", 128, NULL, 1, NULL);
 8002af4:	2300      	movs	r3, #0
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	2301      	movs	r3, #1
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	2280      	movs	r2, #128	@ 0x80
 8002b00:	4915      	ldr	r1, [pc, #84]	@ (8002b58 <main+0x98>)
 8002b02:	4816      	ldr	r0, [pc, #88]	@ (8002b5c <main+0x9c>)
 8002b04:	f7fe f886 	bl	8000c14 <xTaskCreate>

  xTaskCreate(e22_handle_task, "E22 LoRa Handler", 128 * 4, NULL, 1, NULL);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2300      	movs	r3, #0
 8002b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b16:	4912      	ldr	r1, [pc, #72]	@ (8002b60 <main+0xa0>)
 8002b18:	4812      	ldr	r0, [pc, #72]	@ (8002b64 <main+0xa4>)
 8002b1a:	f7fe f87b 	bl	8000c14 <xTaskCreate>

  xTaskCreate(e22_transmission_task, "E22 LoRa Tx Task", 128 * 4, NULL, 1, NULL);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	2301      	movs	r3, #1
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2300      	movs	r3, #0
 8002b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2c:	490e      	ldr	r1, [pc, #56]	@ (8002b68 <main+0xa8>)
 8002b2e:	480f      	ldr	r0, [pc, #60]	@ (8002b6c <main+0xac>)
 8002b30:	f7fe f870 	bl	8000c14 <xTaskCreate>

  vTaskStartScheduler();
 8002b34:	f7fe fa50 	bl	8000fd8 <vTaskStartScheduler>
  //The rest is not executed.
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <main+0x78>
 8002b3c:	08002ea5 	.word	0x08002ea5
 8002b40:	08002ebd 	.word	0x08002ebd
 8002b44:	08002f1d 	.word	0x08002f1d
 8002b48:	080051dd 	.word	0x080051dd
 8002b4c:	080050fd 	.word	0x080050fd
 8002b50:	20003658 	.word	0x20003658
 8002b54:	080073e4 	.word	0x080073e4
 8002b58:	08007404 	.word	0x08007404
 8002b5c:	08002dd1 	.word	0x08002dd1
 8002b60:	08007414 	.word	0x08007414
 8002b64:	08002e05 	.word	0x08002e05
 8002b68:	08007428 	.word	0x08007428
 8002b6c:	08002e3d 	.word	0x08002e3d

08002b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b094      	sub	sp, #80	@ 0x50
 8002b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b76:	f107 0320 	add.w	r3, r7, #32
 8002b7a:	2230      	movs	r2, #48	@ 0x30
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fe8c 	bl	800689c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <SystemClock_Config+0xc8>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	4a26      	ldr	r2, [pc, #152]	@ (8002c38 <SystemClock_Config+0xc8>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba4:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <SystemClock_Config+0xc8>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <SystemClock_Config+0xcc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a20      	ldr	r2, [pc, #128]	@ (8002c3c <SystemClock_Config+0xcc>)
 8002bba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <SystemClock_Config+0xcc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002be0:	230c      	movs	r3, #12
 8002be2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002be4:	2360      	movs	r3, #96	@ 0x60
 8002be6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002be8:	2302      	movs	r3, #2
 8002bea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bec:	2304      	movs	r3, #4
 8002bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf0:	f107 0320 	add.w	r3, r7, #32
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 fb33 	bl	8004260 <HAL_RCC_OscConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c00:	f000 f9d8 	bl	8002fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c04:	230f      	movs	r3, #15
 8002c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	2103      	movs	r1, #3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fd95 	bl	8004750 <HAL_RCC_ClockConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c2c:	f000 f9c2 	bl	8002fb4 <Error_Handler>
  }
}
 8002c30:	bf00      	nop
 8002c32:	3750      	adds	r7, #80	@ 0x50
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000

08002c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c46:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <MX_USART2_UART_Init+0x50>)
 8002c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c66:	220c      	movs	r2, #12
 8002c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c6a:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c76:	4805      	ldr	r0, [pc, #20]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c78:	f002 f9f0 	bl	800505c <HAL_UART_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c82:	f000 f997 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20003658 	.word	0x20003658
 8002c90:	40004400 	.word	0x40004400

08002c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <MX_DMA_Init+0x4c>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <MX_DMA_Init+0x4c>)
 8002ca4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002caa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <MX_DMA_Init+0x4c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2010      	movs	r0, #16
 8002cbc:	f000 fcec 	bl	8003698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cc0:	2010      	movs	r0, #16
 8002cc2:	f000 fd05 	bl	80036d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2011      	movs	r0, #17
 8002ccc:	f000 fce4 	bl	8003698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002cd0:	2011      	movs	r0, #17
 8002cd2:	f000 fcfd 	bl	80036d0 <HAL_NVIC_EnableIRQ>

}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	4a30      	ldr	r2, [pc, #192]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d26:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	4b23      	ldr	r3, [pc, #140]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	4a22      	ldr	r2, [pc, #136]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5e:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <MX_GPIO_Init+0xe0>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d70:	4815      	ldr	r0, [pc, #84]	@ (8002dc8 <MX_GPIO_Init+0xe4>)
 8002d72:	f001 fa41 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M2_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2106      	movs	r1, #6
 8002d7a:	4814      	ldr	r0, [pc, #80]	@ (8002dcc <MX_GPIO_Init+0xe8>)
 8002d7c:	f001 fa3c 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8002d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <MX_GPIO_Init+0xe4>)
 8002d9a:	f001 f8a9 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M2_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M2_Pin;
 8002d9e:	2306      	movs	r3, #6
 8002da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <MX_GPIO_Init+0xe8>)
 8002db6:	f001 f89b 	bl	8003ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	@ 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40020400 	.word	0x40020400

08002dd0 <led_toggle_task>:

/* USER CODE BEGIN 4 */
static void led_toggle_task(void *parameter)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	 TickType_t xLastWakeTime;
	 const TickType_t xPeriod = 1000;
 8002dd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ddc:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(xPeriod));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <led_toggle_task+0x30>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	099a      	lsrs	r2, r3, #6
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f86c 	bl	8000ed4 <xTaskDelayUntil>
 8002dfc:	e7ef      	b.n	8002dde <led_toggle_task+0xe>
 8002dfe:	bf00      	nop
 8002e00:	10624dd3 	.word	0x10624dd3

08002e04 <e22_handle_task>:
}
/**
 * @brief 	LoRa module manager task
 */
static void e22_handle_task(void *parameter)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	 TickType_t xLastWakeTime;
	 const TickType_t xPeriod = 100;
 8002e0c:	2364      	movs	r3, #100	@ 0x64
 8002e0e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(xPeriod));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <e22_handle_task+0x34>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	099a      	lsrs	r2, r3, #6
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f853 	bl	8000ed4 <xTaskDelayUntil>

		e22_lora_manager();
 8002e2e:	f7ff fdd1 	bl	80029d4 <e22_lora_manager>
		xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(xPeriod));
 8002e32:	bf00      	nop
 8002e34:	e7ec      	b.n	8002e10 <e22_handle_task+0xc>
 8002e36:	bf00      	nop
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <e22_transmission_task>:
}
/**
 * @brief 	LoRa Packet transmission task
 */
static void e22_transmission_task(void *parameter)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	 TickType_t xLastWakeTime;
	 const TickType_t xPeriod = 1000;
 8002e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e48:	61fb      	str	r3, [r7, #28]

	 const uint8_t packetSize = 4;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	76fb      	strb	r3, [r7, #27]

	 const uint8_t receiverAddress = 0x09;
 8002e4e:	2309      	movs	r3, #9
 8002e50:	76bb      	strb	r3, [r7, #26]

	 const uint8_t ComChannel = 0x12;
 8002e52:	2312      	movs	r3, #18
 8002e54:	767b      	strb	r3, [r7, #25]

	 uint8_t packet[5] = "ping";
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <e22_transmission_task+0x5c>)
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	743b      	strb	r3, [r7, #16]

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(xPeriod));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
 8002e68:	4a0c      	ldr	r2, [pc, #48]	@ (8002e9c <e22_transmission_task+0x60>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	099a      	lsrs	r2, r3, #6
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe f82c 	bl	8000ed4 <xTaskDelayUntil>
		printf("E22 Tx task running. Attempting to send 'ping'...\r\n");
 8002e7c:	4808      	ldr	r0, [pc, #32]	@ (8002ea0 <e22_transmission_task+0x64>)
 8002e7e:	f003 fc1d 	bl	80066bc <puts>
		e22_lora_transnit(packet, packetSize, receiverAddress, ComChannel);
 8002e82:	7efb      	ldrb	r3, [r7, #27]
 8002e84:	b299      	uxth	r1, r3
 8002e86:	7ebb      	ldrb	r3, [r7, #26]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	7e7b      	ldrb	r3, [r7, #25]
 8002e8c:	f107 000c 	add.w	r0, r7, #12
 8002e90:	f7ff fd5c 	bl	800294c <e22_lora_transnit>
		xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS(xPeriod));
 8002e94:	bf00      	nop
 8002e96:	e7e2      	b.n	8002e5e <e22_transmission_task+0x22>
 8002e98:	676e6970 	.word	0x676e6970
 8002e9c:	10624dd3 	.word	0x10624dd3
 8002ea0:	0800743c 	.word	0x0800743c

08002ea4 <main_e22_transceiverMode>:
/**
 * @brief 	LoRa module transceiver mode selection.  when this mode is active, the module configuration can't be modified.
 *
 */
static void main_e22_transceiverMode(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, M0_Pin|M2_Pin, GPIO_PIN_RESET);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2106      	movs	r1, #6
 8002eac:	4802      	ldr	r0, [pc, #8]	@ (8002eb8 <main_e22_transceiverMode+0x14>)
 8002eae:	f001 f9a3 	bl	80041f8 <HAL_GPIO_WritePin>
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40020400 	.word	0x40020400

08002ebc <main_e22_configurationMode>:
/**
 * @brief 	LoRa module config mode selection. when this mode is active, wireless communication is inactive.
 *
 */
static void main_e22_configurationMode(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	4804      	ldr	r0, [pc, #16]	@ (8002ed8 <main_e22_configurationMode+0x1c>)
 8002ec6:	f001 f997 	bl	80041f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, M2_Pin, GPIO_PIN_SET);
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2104      	movs	r1, #4
 8002ece:	4802      	ldr	r0, [pc, #8]	@ (8002ed8 <main_e22_configurationMode+0x1c>)
 8002ed0:	f001 f992 	bl	80041f8 <HAL_GPIO_WritePin>
}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40020400 	.word	0x40020400

08002edc <HAL_UART_TxCpltCallback>:
 * @brief 	UART data transmission complete callback over DMA
 *
 * @param 	huart	:	Pointer to the UART handler
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	//Change the TX line state to ready
	e22_lora_make_ready();
 8002ee4:	f7ff fdc0 	bl	8002a68 <e22_lora_make_ready>
	printf("UART TX complete. Packet sent from MCU to E22.\r\n");
 8002ee8:	4803      	ldr	r0, [pc, #12]	@ (8002ef8 <HAL_UART_TxCpltCallback+0x1c>)
 8002eea:	f003 fbe7 	bl	80066bc <puts>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08007470 	.word	0x08007470

08002efc <HAL_UARTEx_RxEventCallback>:
 * @param 	huart	:	Pointer to the UART handler
 *
 * @param 	Size	:	Packet size received over UART
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
	e22_lora_reception_complete(Size);
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fdb9 	bl	8002a84 <e22_lora_reception_complete>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <main_lora_packet_receive>:
 * @param 	dataPacket	:	dataPacket Pointer to the buffer containing the received data packet.
 *
 * @param 	size		:	size of the received data packet.
 */
static void main_lora_packet_receive(uint8_t* dataPacket, uint8_t size)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b0be      	sub	sp, #248	@ 0xf8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
	uint8_t loraPacket[MAX_DATA_PACKET_SIZE] = {0};
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	22f0      	movs	r2, #240	@ 0xf0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fcb3 	bl	800689c <memset>
	//Copy data to the main layer
	memcpy(&loraPacket, dataPacket, size);
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	f107 0308 	add.w	r3, r7, #8
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 fd27 	bl	8006992 <memcpy>
	// TODO: implement main layer packet handling
	printf("Received LoRa packet, size: %d, data: %s\r\n", size, loraPacket);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f107 0208 	add.w	r2, r7, #8
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480c      	ldr	r0, [pc, #48]	@ (8002f80 <main_lora_packet_receive+0x64>)
 8002f4e:	f003 fb4d 	bl	80065ec <iprintf>
	if(0 == memcmp(loraPacket, "pong", size))
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	490a      	ldr	r1, [pc, #40]	@ (8002f84 <main_lora_packet_receive+0x68>)
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 fc8e 	bl	800687c <memcmp>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <main_lora_packet_receive+0x5a>
	{
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8002f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f6a:	4807      	ldr	r0, [pc, #28]	@ (8002f88 <main_lora_packet_receive+0x6c>)
 8002f6c:	f001 f95d 	bl	800422a <HAL_GPIO_TogglePin>
		printf("Received 'pong'! Toggling LED.\r\n");
 8002f70:	4806      	ldr	r0, [pc, #24]	@ (8002f8c <main_lora_packet_receive+0x70>)
 8002f72:	f003 fba3 	bl	80066bc <puts>
	}
}
 8002f76:	bf00      	nop
 8002f78:	37f8      	adds	r7, #248	@ 0xf8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	080074a0 	.word	0x080074a0
 8002f84:	080074cc 	.word	0x080074cc
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	080074d4 	.word	0x080074d4

08002f90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fa2:	f000 faa1 	bl	80034e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40014400 	.word	0x40014400

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <Error_Handler+0x8>

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_MspInit+0x4c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	4a0f      	ldr	r2, [pc, #60]	@ (800300c <HAL_MspInit+0x4c>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <HAL_MspInit+0x4c>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	@ (800300c <HAL_MspInit+0x4c>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_MspInit+0x4c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a4b      	ldr	r2, [pc, #300]	@ (800315c <HAL_UART_MspInit+0x14c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	f040 8090 	bne.w	8003154 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	4b49      	ldr	r3, [pc, #292]	@ (8003160 <HAL_UART_MspInit+0x150>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_UART_MspInit+0x150>)
 800303e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003042:	6413      	str	r3, [r2, #64]	@ 0x40
 8003044:	4b46      	ldr	r3, [pc, #280]	@ (8003160 <HAL_UART_MspInit+0x150>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	4b42      	ldr	r3, [pc, #264]	@ (8003160 <HAL_UART_MspInit+0x150>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	4a41      	ldr	r2, [pc, #260]	@ (8003160 <HAL_UART_MspInit+0x150>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003060:	4b3f      	ldr	r3, [pc, #252]	@ (8003160 <HAL_UART_MspInit+0x150>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800306c:	230c      	movs	r3, #12
 800306e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800307c:	2307      	movs	r3, #7
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	4837      	ldr	r0, [pc, #220]	@ (8003164 <HAL_UART_MspInit+0x154>)
 8003088:	f000 ff32 	bl	8003ef0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800308c:	4b36      	ldr	r3, [pc, #216]	@ (8003168 <HAL_UART_MspInit+0x158>)
 800308e:	4a37      	ldr	r2, [pc, #220]	@ (800316c <HAL_UART_MspInit+0x15c>)
 8003090:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003092:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <HAL_UART_MspInit+0x158>)
 8003094:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003098:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309a:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <HAL_UART_MspInit+0x158>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a0:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030a6:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80030ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030bc:	2200      	movs	r2, #0
 80030be:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030c0:	4b29      	ldr	r3, [pc, #164]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030c6:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030cc:	4826      	ldr	r0, [pc, #152]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030ce:	f000 fb0d 	bl	80036ec <HAL_DMA_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80030d8:	f7ff ff6c 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a22      	ldr	r2, [pc, #136]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030e2:	4a21      	ldr	r2, [pc, #132]	@ (8003168 <HAL_UART_MspInit+0x158>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <HAL_UART_MspInit+0x160>)
 80030ea:	4a22      	ldr	r2, [pc, #136]	@ (8003174 <HAL_UART_MspInit+0x164>)
 80030ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80030ee:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <HAL_UART_MspInit+0x160>)
 80030f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <HAL_UART_MspInit+0x160>)
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <HAL_UART_MspInit+0x160>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003102:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <HAL_UART_MspInit+0x160>)
 8003104:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003108:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_UART_MspInit+0x160>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003110:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <HAL_UART_MspInit+0x160>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003116:	4b16      	ldr	r3, [pc, #88]	@ (8003170 <HAL_UART_MspInit+0x160>)
 8003118:	2200      	movs	r2, #0
 800311a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800311c:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <HAL_UART_MspInit+0x160>)
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003122:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <HAL_UART_MspInit+0x160>)
 8003124:	2200      	movs	r2, #0
 8003126:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003128:	4811      	ldr	r0, [pc, #68]	@ (8003170 <HAL_UART_MspInit+0x160>)
 800312a:	f000 fadf 	bl	80036ec <HAL_DMA_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003134:	f7ff ff3e 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0d      	ldr	r2, [pc, #52]	@ (8003170 <HAL_UART_MspInit+0x160>)
 800313c:	639a      	str	r2, [r3, #56]	@ 0x38
 800313e:	4a0c      	ldr	r2, [pc, #48]	@ (8003170 <HAL_UART_MspInit+0x160>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2100      	movs	r1, #0
 8003148:	2026      	movs	r0, #38	@ 0x26
 800314a:	f000 faa5 	bl	8003698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800314e:	2026      	movs	r0, #38	@ 0x26
 8003150:	f000 fabe 	bl	80036d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	@ 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40004400 	.word	0x40004400
 8003160:	40023800 	.word	0x40023800
 8003164:	40020000 	.word	0x40020000
 8003168:	200036a0 	.word	0x200036a0
 800316c:	40026088 	.word	0x40026088
 8003170:	20003700 	.word	0x20003700
 8003174:	400260a0 	.word	0x400260a0

08003178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	@ 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	4b2e      	ldr	r3, [pc, #184]	@ (8003248 <HAL_InitTick+0xd0>)
 800318e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003190:	4a2d      	ldr	r2, [pc, #180]	@ (8003248 <HAL_InitTick+0xd0>)
 8003192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003196:	6453      	str	r3, [r2, #68]	@ 0x44
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_InitTick+0xd0>)
 800319a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031a4:	f107 020c 	add.w	r2, r7, #12
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fcae 	bl	8004b10 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80031b4:	f001 fc98 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 80031b8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031bc:	4a23      	ldr	r2, [pc, #140]	@ (800324c <HAL_InitTick+0xd4>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	3b01      	subs	r3, #1
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <HAL_InitTick+0xd8>)
 80031ca:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_InitTick+0xdc>)
 80031cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80031ce:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <HAL_InitTick+0xd8>)
 80031d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031d4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80031d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003250 <HAL_InitTick+0xd8>)
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <HAL_InitTick+0xd8>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <HAL_InitTick+0xd8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <HAL_InitTick+0xd8>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80031ee:	4818      	ldr	r0, [pc, #96]	@ (8003250 <HAL_InitTick+0xd8>)
 80031f0:	f001 fcc0 	bl	8004b74 <HAL_TIM_Base_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80031fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d11b      	bne.n	800323a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8003202:	4813      	ldr	r0, [pc, #76]	@ (8003250 <HAL_InitTick+0xd8>)
 8003204:	f001 fd10 	bl	8004c28 <HAL_TIM_Base_Start_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800320e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003212:	2b00      	cmp	r3, #0
 8003214:	d111      	bne.n	800323a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003216:	2019      	movs	r0, #25
 8003218:	f000 fa5a 	bl	80036d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	d808      	bhi.n	8003234 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003222:	2200      	movs	r2, #0
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	2019      	movs	r0, #25
 8003228:	f000 fa36 	bl	8003698 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800322c:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <HAL_InitTick+0xe0>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e002      	b.n	800323a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800323a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800323e:	4618      	mov	r0, r3
 8003240:	3730      	adds	r7, #48	@ 0x30
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	431bde83 	.word	0x431bde83
 8003250:	20003760 	.word	0x20003760
 8003254:	40014400 	.word	0x40014400
 8003258:	20000008 	.word	0x20000008

0800325c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003260:	bf00      	nop
 8003262:	e7fd      	b.n	8003260 <NMI_Handler+0x4>

08003264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003268:	bf00      	nop
 800326a:	e7fd      	b.n	8003268 <HardFault_Handler+0x4>

0800326c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <MemManage_Handler+0x4>

08003274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <BusFault_Handler+0x4>

0800327c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <UsageFault_Handler+0x4>

08003284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003298:	4802      	ldr	r0, [pc, #8]	@ (80032a4 <DMA1_Stream5_IRQHandler+0x10>)
 800329a:	f000 fbbf 	bl	8003a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200036a0 	.word	0x200036a0

080032a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80032ac:	4802      	ldr	r0, [pc, #8]	@ (80032b8 <DMA1_Stream6_IRQHandler+0x10>)
 80032ae:	f000 fbb5 	bl	8003a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20003700 	.word	0x20003700

080032bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80032c0:	4802      	ldr	r0, [pc, #8]	@ (80032cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032c2:	f001 fd13 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20003760 	.word	0x20003760

080032d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032d4:	4802      	ldr	r0, [pc, #8]	@ (80032e0 <USART2_IRQHandler+0x10>)
 80032d6:	f001 ffdf 	bl	8005298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20003658 	.word	0x20003658

080032e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e00a      	b.n	800330c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032f6:	f3af 8000 	nop.w
 80032fa:	4601      	mov	r1, r0
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	60ba      	str	r2, [r7, #8]
 8003302:	b2ca      	uxtb	r2, r1
 8003304:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3301      	adds	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	dbf0      	blt.n	80032f6 <_read+0x12>
  }

  return len;
 8003314:	687b      	ldr	r3, [r7, #4]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e009      	b.n	8003344 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	60ba      	str	r2, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	dbf1      	blt.n	8003330 <_write+0x12>
  }
  return len;
 800334c:	687b      	ldr	r3, [r7, #4]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_close>:

int _close(int file)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800337e:	605a      	str	r2, [r3, #4]
  return 0;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <_isatty>:

int _isatty(int file)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003396:	2301      	movs	r3, #1
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c8:	4a14      	ldr	r2, [pc, #80]	@ (800341c <_sbrk+0x5c>)
 80033ca:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <_sbrk+0x60>)
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d4:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <_sbrk+0x64>)
 80033de:	4a12      	ldr	r2, [pc, #72]	@ (8003428 <_sbrk+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d207      	bcs.n	8003400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f0:	f003 faa2 	bl	8006938 <__errno>
 80033f4:	4603      	mov	r3, r0
 80033f6:	220c      	movs	r2, #12
 80033f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033fe:	e009      	b.n	8003414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003400:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <_sbrk+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003406:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <_sbrk+0x64>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <_sbrk+0x64>)
 8003410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20020000 	.word	0x20020000
 8003420:	00000400 	.word	0x00000400
 8003424:	200037a8 	.word	0x200037a8
 8003428:	20003900 	.word	0x20003900

0800342c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <SystemInit+0x20>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003436:	4a05      	ldr	r2, [pc, #20]	@ (800344c <SystemInit+0x20>)
 8003438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800343c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003454:	480d      	ldr	r0, [pc, #52]	@ (800348c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003456:	490e      	ldr	r1, [pc, #56]	@ (8003490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003458:	4a0e      	ldr	r2, [pc, #56]	@ (8003494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800345a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800345c:	e002      	b.n	8003464 <LoopCopyDataInit>

0800345e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003462:	3304      	adds	r3, #4

08003464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003468:	d3f9      	bcc.n	800345e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346a:	4a0b      	ldr	r2, [pc, #44]	@ (8003498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800346c:	4c0b      	ldr	r4, [pc, #44]	@ (800349c <LoopFillZerobss+0x26>)
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003470:	e001      	b.n	8003476 <LoopFillZerobss>

08003472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003474:	3204      	adds	r2, #4

08003476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003478:	d3fb      	bcc.n	8003472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800347a:	f7ff ffd7 	bl	800342c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347e:	f003 fa61 	bl	8006944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003482:	f7ff fb1d 	bl	8002ac0 <main>
  bx  lr    
 8003486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800348c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003490:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003494:	0800755c 	.word	0x0800755c
  ldr r2, =_sbss
 8003498:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800349c:	200038fc 	.word	0x200038fc

080034a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a0:	e7fe      	b.n	80034a0 <ADC_IRQHandler>
	...

080034a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_Init+0x40>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0d      	ldr	r2, [pc, #52]	@ (80034e4 <HAL_Init+0x40>)
 80034ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_Init+0x40>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <HAL_Init+0x40>)
 80034ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c0:	4b08      	ldr	r3, [pc, #32]	@ (80034e4 <HAL_Init+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <HAL_Init+0x40>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034cc:	2003      	movs	r0, #3
 80034ce:	f000 f8d8 	bl	8003682 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034d2:	200f      	movs	r0, #15
 80034d4:	f7ff fe50 	bl	8003178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034d8:	f7ff fd72 	bl	8002fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00

080034e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_IncTick+0x20>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_IncTick+0x24>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	4a04      	ldr	r2, [pc, #16]	@ (800350c <HAL_IncTick+0x24>)
 80034fa:	6013      	str	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	2000000c 	.word	0x2000000c
 800350c:	200037ac 	.word	0x200037ac

08003510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return uwTick;
 8003514:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <HAL_GetTick+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	200037ac 	.word	0x200037ac

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	@ (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	@ (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	@ (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	@ (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	@ 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	@ 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff4c 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036aa:	f7ff ff61 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	f7ff ffb1 	bl	800361c <NVIC_EncodePriority>
 80036ba:	4602      	mov	r2, r0
 80036bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff80 	bl	80035c8 <__NVIC_SetPriority>
}
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ff54 	bl	800358c <__NVIC_EnableIRQ>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036f8:	f7ff ff0a 	bl	8003510 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e099      	b.n	800383c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003728:	e00f      	b.n	800374a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800372a:	f7ff fef1 	bl	8003510 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b05      	cmp	r3, #5
 8003736:	d908      	bls.n	800374a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e078      	b.n	800383c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e8      	bne.n	800372a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4b38      	ldr	r3, [pc, #224]	@ (8003844 <HAL_DMA_Init+0x158>)
 8003764:	4013      	ands	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d107      	bne.n	80037b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	4313      	orrs	r3, r2
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d117      	bne.n	800380e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fb01 	bl	8003df8 <DMA_CheckFifoParam>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2240      	movs	r2, #64	@ 0x40
 8003800:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800380a:	2301      	movs	r3, #1
 800380c:	e016      	b.n	800383c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fab8 	bl	8003d8c <DMA_CalcBaseAndBitshift>
 800381c:	4603      	mov	r3, r0
 800381e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	223f      	movs	r2, #63	@ 0x3f
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	f010803f 	.word	0xf010803f

08003848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_DMA_Start_IT+0x26>
 800386a:	2302      	movs	r3, #2
 800386c:	e040      	b.n	80038f0 <HAL_DMA_Start_IT+0xa8>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d12f      	bne.n	80038e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fa4a 	bl	8003d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a0:	223f      	movs	r2, #63	@ 0x3f
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0216 	orr.w	r2, r2, #22
 80038b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0208 	orr.w	r2, r2, #8
 80038ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e005      	b.n	80038ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003906:	f7ff fe03 	bl	8003510 <HAL_GetTick>
 800390a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d008      	beq.n	800392a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2280      	movs	r2, #128	@ 0x80
 800391c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e052      	b.n	80039d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0216 	bic.w	r2, r2, #22
 8003938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <HAL_DMA_Abort+0x62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0208 	bic.w	r2, r2, #8
 8003968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397a:	e013      	b.n	80039a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800397c:	f7ff fdc8 	bl	8003510 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b05      	cmp	r3, #5
 8003988:	d90c      	bls.n	80039a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2203      	movs	r2, #3
 8003994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e015      	b.n	80039d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e4      	bne.n	800397c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b6:	223f      	movs	r2, #63	@ 0x3f
 80039b8:	409a      	lsls	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d004      	beq.n	80039f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00c      	b.n	8003a10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2205      	movs	r2, #5
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a28:	4b8e      	ldr	r3, [pc, #568]	@ (8003c64 <HAL_DMA_IRQHandler+0x248>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a8e      	ldr	r2, [pc, #568]	@ (8003c68 <HAL_DMA_IRQHandler+0x24c>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	0a9b      	lsrs	r3, r3, #10
 8003a34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	2208      	movs	r2, #8
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01a      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a74:	2208      	movs	r2, #8
 8003a76:	409a      	lsls	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	f043 0201 	orr.w	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	2201      	movs	r2, #1
 8003aac:	409a      	lsls	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab6:	f043 0202 	orr.w	r2, r3, #2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d012      	beq.n	8003af4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	2210      	movs	r2, #16
 8003afa:	409a      	lsls	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d043      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d03c      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	2210      	movs	r2, #16
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d024      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
 8003b4a:	e01f      	b.n	8003b8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
 8003b5c:	e016      	b.n	8003b8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d107      	bne.n	8003b7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0208 	bic.w	r2, r2, #8
 8003b7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	2220      	movs	r2, #32
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 808f 	beq.w	8003cbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8087 	beq.w	8003cbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	d136      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0216 	bic.w	r2, r2, #22
 8003bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <HAL_DMA_IRQHandler+0x1da>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0208 	bic.w	r2, r2, #8
 8003c04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	223f      	movs	r2, #63	@ 0x3f
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d07e      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
        }
        return;
 8003c32:	e079      	b.n	8003d28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01d      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d031      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e02c      	b.n	8003cbc <HAL_DMA_IRQHandler+0x2a0>
 8003c62:	bf00      	nop
 8003c64:	20000004 	.word	0x20000004
 8003c68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d023      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	e01e      	b.n	8003cbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10f      	bne.n	8003cac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0210 	bic.w	r2, r2, #16
 8003c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d032      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d022      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d307      	bcc.n	8003d04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f2      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0x2cc>
 8003d02:	e000      	b.n	8003d06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
 8003d26:	e000      	b.n	8003d2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d28:	bf00      	nop
    }
  }
}
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d108      	bne.n	8003d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d6e:	e007      	b.n	8003d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b10      	subs	r3, #16
 8003d9c:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <DMA_CalcBaseAndBitshift+0x64>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003da6:	4a13      	ldr	r2, [pc, #76]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x68>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d909      	bls.n	8003dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dcc:	e007      	b.n	8003dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	aaaaaaab 	.word	0xaaaaaaab
 8003df4:	08007510 	.word	0x08007510

08003df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11f      	bne.n	8003e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d856      	bhi.n	8003ec6 <DMA_CheckFifoParam+0xce>
 8003e18:	a201      	add	r2, pc, #4	@ (adr r2, 8003e20 <DMA_CheckFifoParam+0x28>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e43 	.word	0x08003e43
 8003e28:	08003e31 	.word	0x08003e31
 8003e2c:	08003ec7 	.word	0x08003ec7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d046      	beq.n	8003eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e043      	b.n	8003eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e4a:	d140      	bne.n	8003ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e50:	e03d      	b.n	8003ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e5a:	d121      	bne.n	8003ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d837      	bhi.n	8003ed2 <DMA_CheckFifoParam+0xda>
 8003e62:	a201      	add	r2, pc, #4	@ (adr r2, 8003e68 <DMA_CheckFifoParam+0x70>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e7f 	.word	0x08003e7f
 8003e70:	08003e79 	.word	0x08003e79
 8003e74:	08003e91 	.word	0x08003e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	e030      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d025      	beq.n	8003ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8e:	e022      	b.n	8003ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e98:	d11f      	bne.n	8003eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e9e:	e01c      	b.n	8003eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d903      	bls.n	8003eae <DMA_CheckFifoParam+0xb6>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d003      	beq.n	8003eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eac:	e018      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb2:	e015      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec4:	e00b      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e00a      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e008      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e006      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ede:	bf00      	nop
    }
  } 
  
  return status; 
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop

08003ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	@ 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	e159      	b.n	80041c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	f040 8148 	bne.w	80041ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d005      	beq.n	8003f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d130      	bne.n	8003fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 0201 	and.w	r2, r3, #1
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d017      	beq.n	8003fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d123      	bne.n	8004034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	08da      	lsrs	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3208      	adds	r2, #8
 8003ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	08da      	lsrs	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	69b9      	ldr	r1, [r7, #24]
 8004030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2203      	movs	r2, #3
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0203 	and.w	r2, r3, #3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a2 	beq.w	80041ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b57      	ldr	r3, [pc, #348]	@ (80041d8 <HAL_GPIO_Init+0x2e8>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	4a56      	ldr	r2, [pc, #344]	@ (80041d8 <HAL_GPIO_Init+0x2e8>)
 8004080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004084:	6453      	str	r3, [r2, #68]	@ 0x44
 8004086:	4b54      	ldr	r3, [pc, #336]	@ (80041d8 <HAL_GPIO_Init+0x2e8>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004092:	4a52      	ldr	r2, [pc, #328]	@ (80041dc <HAL_GPIO_Init+0x2ec>)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a49      	ldr	r2, [pc, #292]	@ (80041e0 <HAL_GPIO_Init+0x2f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d019      	beq.n	80040f2 <HAL_GPIO_Init+0x202>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a48      	ldr	r2, [pc, #288]	@ (80041e4 <HAL_GPIO_Init+0x2f4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_GPIO_Init+0x1fe>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a47      	ldr	r2, [pc, #284]	@ (80041e8 <HAL_GPIO_Init+0x2f8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00d      	beq.n	80040ea <HAL_GPIO_Init+0x1fa>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a46      	ldr	r2, [pc, #280]	@ (80041ec <HAL_GPIO_Init+0x2fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <HAL_GPIO_Init+0x1f6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a45      	ldr	r2, [pc, #276]	@ (80041f0 <HAL_GPIO_Init+0x300>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_GPIO_Init+0x1f2>
 80040de:	2304      	movs	r3, #4
 80040e0:	e008      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040e2:	2307      	movs	r3, #7
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e004      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040f2:	2300      	movs	r3, #0
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f002 0203 	and.w	r2, r2, #3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4093      	lsls	r3, r2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004104:	4935      	ldr	r1, [pc, #212]	@ (80041dc <HAL_GPIO_Init+0x2ec>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004112:	4b38      	ldr	r3, [pc, #224]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004136:	4a2f      	ldr	r2, [pc, #188]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800413c:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004160:	4a24      	ldr	r2, [pc, #144]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004166:	4b23      	ldr	r3, [pc, #140]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800418a:	4a1a      	ldr	r2, [pc, #104]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004190:	4b18      	ldr	r3, [pc, #96]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b4:	4a0f      	ldr	r2, [pc, #60]	@ (80041f4 <HAL_GPIO_Init+0x304>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	f67f aea2 	bls.w	8003f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	@ 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
 8004204:	4613      	mov	r3, r2
 8004206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004208:	787b      	ldrb	r3, [r7, #1]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004214:	e003      	b.n	800421e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	041a      	lsls	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	619a      	str	r2, [r3, #24]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800423c:	887a      	ldrh	r2, [r7, #2]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4013      	ands	r3, r2
 8004242:	041a      	lsls	r2, r3, #16
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	43d9      	mvns	r1, r3
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	400b      	ands	r3, r1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	619a      	str	r2, [r3, #24]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e267      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d075      	beq.n	800436a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800427e:	4b88      	ldr	r3, [pc, #544]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b04      	cmp	r3, #4
 8004288:	d00c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428a:	4b85      	ldr	r3, [pc, #532]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004292:	2b08      	cmp	r3, #8
 8004294:	d112      	bne.n	80042bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004296:	4b82      	ldr	r3, [pc, #520]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a2:	d10b      	bne.n	80042bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	4b7e      	ldr	r3, [pc, #504]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d05b      	beq.n	8004368 <HAL_RCC_OscConfig+0x108>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d157      	bne.n	8004368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e242      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c4:	d106      	bne.n	80042d4 <HAL_RCC_OscConfig+0x74>
 80042c6:	4b76      	ldr	r3, [pc, #472]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a75      	ldr	r2, [pc, #468]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e01d      	b.n	8004310 <HAL_RCC_OscConfig+0xb0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x98>
 80042de:	4b70      	ldr	r3, [pc, #448]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6f      	ldr	r2, [pc, #444]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b6d      	ldr	r3, [pc, #436]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6c      	ldr	r2, [pc, #432]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0xb0>
 80042f8:	4b69      	ldr	r3, [pc, #420]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a68      	ldr	r2, [pc, #416]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b66      	ldr	r3, [pc, #408]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a65      	ldr	r2, [pc, #404]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 800430a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7ff f8fa 	bl	8003510 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7ff f8f6 	bl	8003510 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e207      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	4b5b      	ldr	r3, [pc, #364]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0xc0>
 800433e:	e014      	b.n	800436a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7ff f8e6 	bl	8003510 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7ff f8e2 	bl	8003510 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1f3      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	4b51      	ldr	r3, [pc, #324]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0xe8>
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d063      	beq.n	800443e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004376:	4b4a      	ldr	r3, [pc, #296]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004382:	4b47      	ldr	r3, [pc, #284]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800438e:	4b44      	ldr	r3, [pc, #272]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d116      	bne.n	80043c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	4b41      	ldr	r3, [pc, #260]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x152>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e1c7      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4937      	ldr	r1, [pc, #220]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	e03a      	b.n	800443e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d0:	4b34      	ldr	r3, [pc, #208]	@ (80044a4 <HAL_RCC_OscConfig+0x244>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7ff f89b 	bl	8003510 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7ff f897 	bl	8003510 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e1a8      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	4b2b      	ldr	r3, [pc, #172]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b28      	ldr	r3, [pc, #160]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4925      	ldr	r1, [pc, #148]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
 8004410:	e015      	b.n	800443e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCC_OscConfig+0x244>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7ff f87a 	bl	8003510 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004420:	f7ff f876 	bl	8003510 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e187      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	4b1b      	ldr	r3, [pc, #108]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d036      	beq.n	80044b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d016      	beq.n	8004480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004452:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <HAL_RCC_OscConfig+0x248>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004458:	f7ff f85a 	bl	8003510 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004460:	f7ff f856 	bl	8003510 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e167      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <HAL_RCC_OscConfig+0x240>)
 8004474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x200>
 800447e:	e01b      	b.n	80044b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004480:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <HAL_RCC_OscConfig+0x248>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004486:	f7ff f843 	bl	8003510 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	e00e      	b.n	80044ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448e:	f7ff f83f 	bl	8003510 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d907      	bls.n	80044ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e150      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
 80044a0:	40023800 	.word	0x40023800
 80044a4:	42470000 	.word	0x42470000
 80044a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	4b88      	ldr	r3, [pc, #544]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80044ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1ea      	bne.n	800448e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8097 	beq.w	80045f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ca:	4b81      	ldr	r3, [pc, #516]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	4b7d      	ldr	r3, [pc, #500]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	4a7c      	ldr	r2, [pc, #496]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80044e6:	4b7a      	ldr	r3, [pc, #488]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f6:	4b77      	ldr	r3, [pc, #476]	@ (80046d4 <HAL_RCC_OscConfig+0x474>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d118      	bne.n	8004534 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004502:	4b74      	ldr	r3, [pc, #464]	@ (80046d4 <HAL_RCC_OscConfig+0x474>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a73      	ldr	r2, [pc, #460]	@ (80046d4 <HAL_RCC_OscConfig+0x474>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450e:	f7fe ffff 	bl	8003510 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004516:	f7fe fffb 	bl	8003510 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e10c      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b6a      	ldr	r3, [pc, #424]	@ (80046d4 <HAL_RCC_OscConfig+0x474>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x2ea>
 800453c:	4b64      	ldr	r3, [pc, #400]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004540:	4a63      	ldr	r2, [pc, #396]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6713      	str	r3, [r2, #112]	@ 0x70
 8004548:	e01c      	b.n	8004584 <HAL_RCC_OscConfig+0x324>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b05      	cmp	r3, #5
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x30c>
 8004552:	4b5f      	ldr	r3, [pc, #380]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	4a5e      	ldr	r2, [pc, #376]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004558:	f043 0304 	orr.w	r3, r3, #4
 800455c:	6713      	str	r3, [r2, #112]	@ 0x70
 800455e:	4b5c      	ldr	r3, [pc, #368]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	4a5b      	ldr	r2, [pc, #364]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6713      	str	r3, [r2, #112]	@ 0x70
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0x324>
 800456c:	4b58      	ldr	r3, [pc, #352]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	4a57      	ldr	r2, [pc, #348]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70
 8004578:	4b55      	ldr	r3, [pc, #340]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457c:	4a54      	ldr	r2, [pc, #336]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 800457e:	f023 0304 	bic.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fe ffc0 	bl	8003510 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004594:	f7fe ffbc 	bl	8003510 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e0cb      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	4b49      	ldr	r3, [pc, #292]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ee      	beq.n	8004594 <HAL_RCC_OscConfig+0x334>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b8:	f7fe ffaa 	bl	8003510 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fe ffa6 	bl	8003510 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0b5      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d6:	4b3e      	ldr	r3, [pc, #248]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1ee      	bne.n	80045c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d105      	bne.n	80045f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e8:	4b39      	ldr	r3, [pc, #228]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	4a38      	ldr	r2, [pc, #224]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80045ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a1 	beq.w	8004740 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045fe:	4b34      	ldr	r3, [pc, #208]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b08      	cmp	r3, #8
 8004608:	d05c      	beq.n	80046c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d141      	bne.n	8004696 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b31      	ldr	r3, [pc, #196]	@ (80046d8 <HAL_RCC_OscConfig+0x478>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fe ff7a 	bl	8003510 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fe ff76 	bl	8003510 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e087      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	4b27      	ldr	r3, [pc, #156]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	3b01      	subs	r3, #1
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	491b      	ldr	r1, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004668:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <HAL_RCC_OscConfig+0x478>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fe ff4f 	bl	8003510 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004676:	f7fe ff4b 	bl	8003510 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e05c      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004688:	4b11      	ldr	r3, [pc, #68]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x416>
 8004694:	e054      	b.n	8004740 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <HAL_RCC_OscConfig+0x478>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fe ff38 	bl	8003510 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fe ff34 	bl	8003510 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e045      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_RCC_OscConfig+0x470>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x444>
 80046c2:	e03d      	b.n	8004740 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e038      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40007000 	.word	0x40007000
 80046d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046dc:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_RCC_OscConfig+0x4ec>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d028      	beq.n	800473c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d121      	bne.n	800473c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d11a      	bne.n	800473c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004712:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	4293      	cmp	r3, r2
 8004716:	d111      	bne.n	800473c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	3b01      	subs	r3, #1
 8004726:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800

08004750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0cc      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b68      	ldr	r3, [pc, #416]	@ (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d90c      	bls.n	800478c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b65      	ldr	r3, [pc, #404]	@ (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b63      	ldr	r3, [pc, #396]	@ (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0b8      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d020      	beq.n	80047da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a4:	4b59      	ldr	r3, [pc, #356]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a58      	ldr	r2, [pc, #352]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047bc:	4b53      	ldr	r3, [pc, #332]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a52      	ldr	r2, [pc, #328]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c8:	4b50      	ldr	r3, [pc, #320]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	494d      	ldr	r1, [pc, #308]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d044      	beq.n	8004870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b47      	ldr	r3, [pc, #284]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d119      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e07f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d003      	beq.n	800480e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480a:	2b03      	cmp	r3, #3
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	4b3f      	ldr	r3, [pc, #252]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e06f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481e:	4b3b      	ldr	r3, [pc, #236]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e067      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b37      	ldr	r3, [pc, #220]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4934      	ldr	r1, [pc, #208]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004840:	f7fe fe66 	bl	8003510 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fe fe62 	bl	8003510 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e04f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004870:	4b25      	ldr	r3, [pc, #148]	@ (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d20c      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b22      	ldr	r3, [pc, #136]	@ (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b20      	ldr	r3, [pc, #128]	@ (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e032      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a4:	4b19      	ldr	r3, [pc, #100]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4916      	ldr	r1, [pc, #88]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c2:	4b12      	ldr	r3, [pc, #72]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	490e      	ldr	r1, [pc, #56]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048d6:	f000 f821 	bl	800491c <HAL_RCC_GetSysClockFreq>
 80048da:	4602      	mov	r2, r0
 80048dc:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	490a      	ldr	r1, [pc, #40]	@ (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	5ccb      	ldrb	r3, [r1, r3]
 80048ea:	fa22 f303 	lsr.w	r3, r2, r3
 80048ee:	4a09      	ldr	r2, [pc, #36]	@ (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048f2:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <HAL_RCC_ClockConfig+0x1c8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fc3e 	bl	8003178 <HAL_InitTick>

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023c00 	.word	0x40023c00
 800490c:	40023800 	.word	0x40023800
 8004910:	080074f8 	.word	0x080074f8
 8004914:	20000004 	.word	0x20000004
 8004918:	20000008 	.word	0x20000008

0800491c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800491c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004920:	b090      	sub	sp, #64	@ 0x40
 8004922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004934:	4b59      	ldr	r3, [pc, #356]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b08      	cmp	r3, #8
 800493e:	d00d      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x40>
 8004940:	2b08      	cmp	r3, #8
 8004942:	f200 80a1 	bhi.w	8004a88 <HAL_RCC_GetSysClockFreq+0x16c>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x34>
 800494a:	2b04      	cmp	r3, #4
 800494c:	d003      	beq.n	8004956 <HAL_RCC_GetSysClockFreq+0x3a>
 800494e:	e09b      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004950:	4b53      	ldr	r3, [pc, #332]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004952:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004954:	e09b      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004956:	4b53      	ldr	r3, [pc, #332]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004958:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800495a:	e098      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800495c:	4b4f      	ldr	r3, [pc, #316]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x180>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004964:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004966:	4b4d      	ldr	r3, [pc, #308]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d028      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004972:	4b4a      	ldr	r3, [pc, #296]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	2200      	movs	r2, #0
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	627a      	str	r2, [r7, #36]	@ 0x24
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004984:	2100      	movs	r1, #0
 8004986:	4b47      	ldr	r3, [pc, #284]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004988:	fb03 f201 	mul.w	r2, r3, r1
 800498c:	2300      	movs	r3, #0
 800498e:	fb00 f303 	mul.w	r3, r0, r3
 8004992:	4413      	add	r3, r2
 8004994:	4a43      	ldr	r2, [pc, #268]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004996:	fba0 1202 	umull	r1, r2, r0, r2
 800499a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800499c:	460a      	mov	r2, r1
 800499e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a2:	4413      	add	r3, r2
 80049a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a8:	2200      	movs	r2, #0
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	61fa      	str	r2, [r7, #28]
 80049ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049b6:	f7fb fc63 	bl	8000280 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4613      	mov	r3, r2
 80049c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049c2:	e053      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c4:	4b35      	ldr	r3, [pc, #212]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x180>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	099b      	lsrs	r3, r3, #6
 80049ca:	2200      	movs	r2, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	617a      	str	r2, [r7, #20]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049d6:	f04f 0b00 	mov.w	fp, #0
 80049da:	4652      	mov	r2, sl
 80049dc:	465b      	mov	r3, fp
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	0159      	lsls	r1, r3, #5
 80049e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ec:	0150      	lsls	r0, r2, #5
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	ebb2 080a 	subs.w	r8, r2, sl
 80049f6:	eb63 090b 	sbc.w	r9, r3, fp
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a0e:	ebb2 0408 	subs.w	r4, r2, r8
 8004a12:	eb63 0509 	sbc.w	r5, r3, r9
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	00eb      	lsls	r3, r5, #3
 8004a20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a24:	00e2      	lsls	r2, r4, #3
 8004a26:	4614      	mov	r4, r2
 8004a28:	461d      	mov	r5, r3
 8004a2a:	eb14 030a 	adds.w	r3, r4, sl
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	eb45 030b 	adc.w	r3, r5, fp
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a42:	4629      	mov	r1, r5
 8004a44:	028b      	lsls	r3, r1, #10
 8004a46:	4621      	mov	r1, r4
 8004a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	028a      	lsls	r2, r1, #10
 8004a50:	4610      	mov	r0, r2
 8004a52:	4619      	mov	r1, r3
 8004a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a56:	2200      	movs	r2, #0
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	60fa      	str	r2, [r7, #12]
 8004a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a60:	f7fb fc0e 	bl	8000280 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3740      	adds	r7, #64	@ 0x40
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	017d7840 	.word	0x017d7840

08004aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000004 	.word	0x20000004

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ac4:	f7ff fff0 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0a9b      	lsrs	r3, r3, #10
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4903      	ldr	r1, [pc, #12]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	08007508 	.word	0x08007508

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aec:	f7ff ffdc 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0b5b      	lsrs	r3, r3, #13
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	08007508 	.word	0x08007508

08004b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	220f      	movs	r2, #15
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b20:	4b12      	ldr	r3, [pc, #72]	@ (8004b6c <HAL_RCC_GetClockConfig+0x5c>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0203 	and.w	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b6c <HAL_RCC_GetClockConfig+0x5c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b38:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <HAL_RCC_GetClockConfig+0x5c>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b44:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCC_GetClockConfig+0x5c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	08db      	lsrs	r3, r3, #3
 8004b4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b52:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <HAL_RCC_GetClockConfig+0x60>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0207 	and.w	r2, r3, #7
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	601a      	str	r2, [r3, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40023c00 	.word	0x40023c00

08004b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e041      	b.n	8004c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f839 	bl	8004c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f000 f9b2 	bl	8004f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e044      	b.n	8004cca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x6c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6a:	d013      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x6c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1a      	ldr	r2, [pc, #104]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xb4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x6c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a19      	ldr	r2, [pc, #100]	@ (8004ce0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x6c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x6c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a16      	ldr	r2, [pc, #88]	@ (8004ce8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d111      	bne.n	8004cb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d010      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	e007      	b.n	8004cc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40014000 	.word	0x40014000

08004cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01b      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0202 	mvn.w	r2, #2
 8004d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8d2 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8c4 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8d5 	bl	8004ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d020      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0204 	mvn.w	r2, #4
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8ac 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f89e 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f8af 	bl	8004ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d020      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01b      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0208 	mvn.w	r2, #8
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f886 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f878 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f889 	bl	8004ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d020      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01b      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0210 	mvn.w	r2, #16
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f860 	bl	8004ee0 <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f852 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f863 	bl	8004ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0201 	mvn.w	r2, #1
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fe f89c 	bl	8002f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8e6 	bl	8005048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f834 	bl	8004f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0220 	mvn.w	r2, #32
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8b8 	bl	8005034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8005018 <TIM_Base_SetConfig+0xfc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_Base_SetConfig+0x38>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3a:	d00b      	beq.n	8004f54 <TIM_Base_SetConfig+0x38>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a37      	ldr	r2, [pc, #220]	@ (800501c <TIM_Base_SetConfig+0x100>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_Base_SetConfig+0x38>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a36      	ldr	r2, [pc, #216]	@ (8005020 <TIM_Base_SetConfig+0x104>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0x38>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <TIM_Base_SetConfig+0x108>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d108      	bne.n	8004f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2b      	ldr	r2, [pc, #172]	@ (8005018 <TIM_Base_SetConfig+0xfc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x8a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a28      	ldr	r2, [pc, #160]	@ (800501c <TIM_Base_SetConfig+0x100>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a27      	ldr	r2, [pc, #156]	@ (8005020 <TIM_Base_SetConfig+0x104>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a26      	ldr	r2, [pc, #152]	@ (8005024 <TIM_Base_SetConfig+0x108>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a25      	ldr	r2, [pc, #148]	@ (8005028 <TIM_Base_SetConfig+0x10c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a24      	ldr	r2, [pc, #144]	@ (800502c <TIM_Base_SetConfig+0x110>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a23      	ldr	r2, [pc, #140]	@ (8005030 <TIM_Base_SetConfig+0x114>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a0e      	ldr	r2, [pc, #56]	@ (8005018 <TIM_Base_SetConfig+0xfc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d103      	bne.n	8004fec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d105      	bne.n	800500a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	611a      	str	r2, [r3, #16]
  }
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400
 8005030:	40014800 	.word	0x40014800

08005034 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e042      	b.n	80050f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fd ffc4 	bl	8003010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2224      	movs	r2, #36	@ 0x24
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800509e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 ff6d 	bl	8005f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	@ 0x30
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b20      	cmp	r3, #32
 8005114:	d156      	bne.n	80051c4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_UART_Transmit_DMA+0x26>
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e04f      	b.n	80051c6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2221      	movs	r2, #33	@ 0x21
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	4a21      	ldr	r2, [pc, #132]	@ (80051d0 <HAL_UART_Transmit_DMA+0xd4>)
 800514c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	4a20      	ldr	r2, [pc, #128]	@ (80051d4 <HAL_UART_Transmit_DMA+0xd8>)
 8005154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	4a1f      	ldr	r2, [pc, #124]	@ (80051d8 <HAL_UART_Transmit_DMA+0xdc>)
 800515c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	2200      	movs	r2, #0
 8005164:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005166:	f107 0308 	add.w	r3, r7, #8
 800516a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005172:	6819      	ldr	r1, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3304      	adds	r3, #4
 800517a:	461a      	mov	r2, r3
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	f7fe fb63 	bl	8003848 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800518a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3314      	adds	r3, #20
 8005192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	617b      	str	r3, [r7, #20]
   return(result);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80051ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6a39      	ldr	r1, [r7, #32]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3730      	adds	r7, #48	@ 0x30
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	0800580d 	.word	0x0800580d
 80051d4:	080058a7 	.word	0x080058a7
 80051d8:	08005a2b 	.word	0x08005a2b

080051dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08c      	sub	sp, #48	@ 0x30
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d14a      	bne.n	800528c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e043      	b.n	800528e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fc51 	bl	8005ac0 <UART_Start_Receive_DMA>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005228:	2b00      	cmp	r3, #0
 800522a:	d12c      	bne.n	8005286 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	2b01      	cmp	r3, #1
 8005232:	d125      	bne.n	8005280 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	617b      	str	r3, [r7, #20]
   return(result);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f043 0310 	orr.w	r3, r3, #16
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526a:	627a      	str	r2, [r7, #36]	@ 0x24
 800526c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6a39      	ldr	r1, [r7, #32]
 8005270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	61fb      	str	r3, [r7, #28]
   return(result);
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800527e:	e002      	b.n	8005286 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005286:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800528a:	e000      	b.n	800528e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3730      	adds	r7, #48	@ 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b0ba      	sub	sp, #232	@ 0xe8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_UART_IRQHandler+0x66>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fd83 	bl	8005e02 <UART_Receive_IT>
      return;
 80052fc:	e25b      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80de 	beq.w	80054c4 <HAL_UART_IRQHandler+0x22c>
 8005308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005318:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80d1 	beq.w	80054c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_UART_IRQHandler+0xae>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	f043 0201 	orr.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_UART_IRQHandler+0xd2>
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005362:	f043 0202 	orr.w	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_UART_IRQHandler+0xf6>
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f043 0204 	orr.w	r2, r3, #4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d011      	beq.n	80053be <HAL_UART_IRQHandler+0x126>
 800539a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	f043 0208 	orr.w	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 81f2 	beq.w	80057ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_UART_IRQHandler+0x14e>
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fd0e 	bl	8005e02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d103      	bne.n	8005412 <HAL_UART_IRQHandler+0x17a>
 800540a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04f      	beq.n	80054b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fc16 	bl	8005c44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005422:	2b40      	cmp	r3, #64	@ 0x40
 8005424:	d141      	bne.n	80054aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800543c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005452:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800545e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800546a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1d9      	bne.n	8005426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d013      	beq.n	80054a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	4a7e      	ldr	r2, [pc, #504]	@ (8005678 <HAL_UART_IRQHandler+0x3e0>)
 8005480:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe faa6 	bl	80039d8 <HAL_DMA_Abort_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800549c:	4610      	mov	r0, r2
 800549e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e00e      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9a8 	bl	80057f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e00a      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f9a4 	bl	80057f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	e006      	b.n	80054c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9a0 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054be:	e175      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	bf00      	nop
    return;
 80054c2:	e173      	b.n	80057ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	f040 814f 	bne.w	800576c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8148 	beq.w	800576c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8141 	beq.w	800576c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550a:	2b40      	cmp	r3, #64	@ 0x40
 800550c:	f040 80b6 	bne.w	800567c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800551c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8145 	beq.w	80057b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800552a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800552e:	429a      	cmp	r2, r3
 8005530:	f080 813e 	bcs.w	80057b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800553a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005546:	f000 8088 	beq.w	800565a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800557a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800558e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1d9      	bne.n	800554a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e1      	bne.n	8005596 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800563c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800563e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005642:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800564a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e3      	bne.n	8005618 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe f94f 	bl	80038f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	b29b      	uxth	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fd fc43 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005676:	e09b      	b.n	80057b0 <HAL_UART_IRQHandler+0x518>
 8005678:	08005d0b 	.word	0x08005d0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005684:	b29b      	uxth	r3, r3
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 808e 	beq.w	80057b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8089 	beq.w	80057b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80056c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e3      	bne.n	80056a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e3      	bne.n	80056da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005744:	61fa      	str	r2, [r7, #28]
 8005746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	69b9      	ldr	r1, [r7, #24]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	617b      	str	r3, [r7, #20]
   return(result);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e3      	bne.n	8005720 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800575e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fd fbc9 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800576a:	e023      	b.n	80057b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <HAL_UART_IRQHandler+0x4f4>
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fad4 	bl	8005d32 <UART_Transmit_IT>
    return;
 800578a:	e014      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <HAL_UART_IRQHandler+0x51e>
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fb14 	bl	8005dd2 <UART_EndTransmit_IT>
    return;
 80057aa:	e004      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057b4:	bf00      	nop
  }
}
 80057b6:	37e8      	adds	r7, #232	@ 0xe8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b090      	sub	sp, #64	@ 0x40
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d137      	bne.n	8005898 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582a:	2200      	movs	r2, #0
 800582c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800582e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	623b      	str	r3, [r7, #32]
   return(result);
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800584e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	60fb      	str	r3, [r7, #12]
   return(result);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005878:	637b      	str	r3, [r7, #52]	@ 0x34
 800587a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005882:	61fa      	str	r2, [r7, #28]
 8005884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	617b      	str	r3, [r7, #20]
   return(result);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005896:	e002      	b.n	800589e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005898:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800589a:	f7fd fb1f 	bl	8002edc <HAL_UART_TxCpltCallback>
}
 800589e:	bf00      	nop
 80058a0:	3740      	adds	r7, #64	@ 0x40
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff ff81 	bl	80057bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b09c      	sub	sp, #112	@ 0x70
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d172      	bne.n	80059c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80058de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e0:	2200      	movs	r2, #0
 80058e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005904:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005906:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800590a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e5      	bne.n	80058e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005938:	647a      	str	r2, [r7, #68]	@ 0x44
 800593a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800593e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3314      	adds	r3, #20
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	623b      	str	r3, [r7, #32]
   return(result);
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005962:	663b      	str	r3, [r7, #96]	@ 0x60
 8005964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800596c:	633a      	str	r2, [r7, #48]	@ 0x30
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e5      	bne.n	800594c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800598a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598c:	2b01      	cmp	r3, #1
 800598e:	d119      	bne.n	80059c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0310 	bic.w	r3, r3, #16
 80059a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80059b0:	61fa      	str	r2, [r7, #28]
 80059b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	69b9      	ldr	r1, [r7, #24]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	617b      	str	r3, [r7, #20]
   return(result);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e5      	bne.n	8005990 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059c6:	2200      	movs	r2, #0
 80059c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d106      	bne.n	80059e0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059d6:	4619      	mov	r1, r3
 80059d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80059da:	f7fd fa8f 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059de:	e002      	b.n	80059e6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80059e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80059e2:	f7ff fef5 	bl	80057d0 <HAL_UART_RxCpltCallback>
}
 80059e6:	bf00      	nop
 80059e8:	3770      	adds	r7, #112	@ 0x70
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d108      	bne.n	8005a1c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	4619      	mov	r1, r3
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7fd fa71 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a1a:	e002      	b.n	8005a22 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff fee1 	bl	80057e4 <HAL_UART_RxHalfCpltCallback>
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a46:	2b80      	cmp	r3, #128	@ 0x80
 8005a48:	bf0c      	ite	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	2300      	movne	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b21      	cmp	r3, #33	@ 0x21
 8005a5c:	d108      	bne.n	8005a70 <UART_DMAError+0x46>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2200      	movs	r2, #0
 8005a68:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005a6a:	68b8      	ldr	r0, [r7, #8]
 8005a6c:	f000 f8c2 	bl	8005bf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	bf0c      	ite	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	2300      	movne	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b22      	cmp	r3, #34	@ 0x22
 8005a90:	d108      	bne.n	8005aa4 <UART_DMAError+0x7a>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005a9e:	68b8      	ldr	r0, [r7, #8]
 8005aa0:	f000 f8d0 	bl	8005c44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa8:	f043 0210 	orr.w	r2, r3, #16
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab0:	68b8      	ldr	r0, [r7, #8]
 8005ab2:	f7ff fea1 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab6:	bf00      	nop
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b098      	sub	sp, #96	@ 0x60
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2222      	movs	r2, #34	@ 0x22
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aec:	4a3e      	ldr	r2, [pc, #248]	@ (8005be8 <UART_Start_Receive_DMA+0x128>)
 8005aee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af4:	4a3d      	ldr	r2, [pc, #244]	@ (8005bec <UART_Start_Receive_DMA+0x12c>)
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afc:	4a3c      	ldr	r2, [pc, #240]	@ (8005bf0 <UART_Start_Receive_DMA+0x130>)
 8005afe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b04:	2200      	movs	r2, #0
 8005b06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	f7fd fe92 	bl	8003848 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d019      	beq.n	8005b76 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b62:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b96:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e5      	bne.n	8005b76 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3314      	adds	r3, #20
 8005bc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bca:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6a39      	ldr	r1, [r7, #32]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e5      	bne.n	8005baa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3760      	adds	r7, #96	@ 0x60
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	080058c3 	.word	0x080058c3
 8005bec:	080059ef 	.word	0x080059ef
 8005bf0:	08005a2b 	.word	0x08005a2b

08005bf4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	@ 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	61ba      	str	r2, [r7, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6979      	ldr	r1, [r7, #20]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c38:	bf00      	nop
 8005c3a:	3724      	adds	r7, #36	@ 0x24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b095      	sub	sp, #84	@ 0x54
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	330c      	adds	r3, #12
 8005c52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	330c      	adds	r3, #12
 8005c6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e5      	bne.n	8005c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3314      	adds	r3, #20
 8005c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e5      	bne.n	8005c80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d119      	bne.n	8005cf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f023 0310 	bic.w	r3, r3, #16
 8005cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cdc:	61ba      	str	r2, [r7, #24]
 8005cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cfe:	bf00      	nop
 8005d00:	3754      	adds	r7, #84	@ 0x54
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fd67 	bl	80057f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b21      	cmp	r3, #33	@ 0x21
 8005d44:	d13e      	bne.n	8005dc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4e:	d114      	bne.n	8005d7a <UART_Transmit_IT+0x48>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d110      	bne.n	8005d7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	1c9a      	adds	r2, r3, #2
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	621a      	str	r2, [r3, #32]
 8005d78:	e008      	b.n	8005d8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6211      	str	r1, [r2, #32]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e000      	b.n	8005dc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fd f872 	bl	8002edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b08c      	sub	sp, #48	@ 0x30
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b22      	cmp	r3, #34	@ 0x22
 8005e14:	f040 80ae 	bne.w	8005f74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e20:	d117      	bne.n	8005e52 <UART_Receive_IT+0x50>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d113      	bne.n	8005e52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	1c9a      	adds	r2, r3, #2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e50:	e026      	b.n	8005ea0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e64:	d007      	beq.n	8005e76 <UART_Receive_IT+0x74>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <UART_Receive_IT+0x82>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e008      	b.n	8005e96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4619      	mov	r1, r3
 8005eae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d15d      	bne.n	8005f70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0220 	bic.w	r2, r2, #32
 8005ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ed2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d135      	bne.n	8005f66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f20:	623a      	str	r2, [r7, #32]
 8005f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d10a      	bne.n	8005f58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fc ffcc 	bl	8002efc <HAL_UARTEx_RxEventCallback>
 8005f64:	e002      	b.n	8005f6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fc32 	bl	80057d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e002      	b.n	8005f76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3730      	adds	r7, #48	@ 0x30
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f84:	b0c0      	sub	sp, #256	@ 0x100
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	68d9      	ldr	r1, [r3, #12]
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	ea40 0301 	orr.w	r3, r0, r1
 8005fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fd8:	f021 010c 	bic.w	r1, r1, #12
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffa:	6999      	ldr	r1, [r3, #24]
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	ea40 0301 	orr.w	r3, r0, r1
 8006006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b8f      	ldr	r3, [pc, #572]	@ (800624c <UART_SetConfig+0x2cc>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d005      	beq.n	8006020 <UART_SetConfig+0xa0>
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b8d      	ldr	r3, [pc, #564]	@ (8006250 <UART_SetConfig+0x2d0>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d104      	bne.n	800602a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006020:	f7fe fd62 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8006024:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006028:	e003      	b.n	8006032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800602a:	f7fe fd49 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 800602e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800603c:	f040 810c 	bne.w	8006258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800604a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800604e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006052:	4622      	mov	r2, r4
 8006054:	462b      	mov	r3, r5
 8006056:	1891      	adds	r1, r2, r2
 8006058:	65b9      	str	r1, [r7, #88]	@ 0x58
 800605a:	415b      	adcs	r3, r3
 800605c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800605e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006062:	4621      	mov	r1, r4
 8006064:	eb12 0801 	adds.w	r8, r2, r1
 8006068:	4629      	mov	r1, r5
 800606a:	eb43 0901 	adc.w	r9, r3, r1
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800607a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800607e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006082:	4690      	mov	r8, r2
 8006084:	4699      	mov	r9, r3
 8006086:	4623      	mov	r3, r4
 8006088:	eb18 0303 	adds.w	r3, r8, r3
 800608c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006090:	462b      	mov	r3, r5
 8006092:	eb49 0303 	adc.w	r3, r9, r3
 8006096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060ae:	460b      	mov	r3, r1
 80060b0:	18db      	adds	r3, r3, r3
 80060b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80060b4:	4613      	mov	r3, r2
 80060b6:	eb42 0303 	adc.w	r3, r2, r3
 80060ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80060bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060c4:	f7fa f8dc 	bl	8000280 <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4b61      	ldr	r3, [pc, #388]	@ (8006254 <UART_SetConfig+0x2d4>)
 80060ce:	fba3 2302 	umull	r2, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	011c      	lsls	r4, r3, #4
 80060d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060f0:	415b      	adcs	r3, r3
 80060f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060f8:	4641      	mov	r1, r8
 80060fa:	eb12 0a01 	adds.w	sl, r2, r1
 80060fe:	4649      	mov	r1, r9
 8006100:	eb43 0b01 	adc.w	fp, r3, r1
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006118:	4692      	mov	sl, r2
 800611a:	469b      	mov	fp, r3
 800611c:	4643      	mov	r3, r8
 800611e:	eb1a 0303 	adds.w	r3, sl, r3
 8006122:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006126:	464b      	mov	r3, r9
 8006128:	eb4b 0303 	adc.w	r3, fp, r3
 800612c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800613c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006144:	460b      	mov	r3, r1
 8006146:	18db      	adds	r3, r3, r3
 8006148:	643b      	str	r3, [r7, #64]	@ 0x40
 800614a:	4613      	mov	r3, r2
 800614c:	eb42 0303 	adc.w	r3, r2, r3
 8006150:	647b      	str	r3, [r7, #68]	@ 0x44
 8006152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800615a:	f7fa f891 	bl	8000280 <__aeabi_uldivmod>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4611      	mov	r1, r2
 8006164:	4b3b      	ldr	r3, [pc, #236]	@ (8006254 <UART_SetConfig+0x2d4>)
 8006166:	fba3 2301 	umull	r2, r3, r3, r1
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	2264      	movs	r2, #100	@ 0x64
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	1acb      	subs	r3, r1, r3
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800617a:	4b36      	ldr	r3, [pc, #216]	@ (8006254 <UART_SetConfig+0x2d4>)
 800617c:	fba3 2302 	umull	r2, r3, r3, r2
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006188:	441c      	add	r4, r3
 800618a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618e:	2200      	movs	r2, #0
 8006190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006194:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800619c:	4642      	mov	r2, r8
 800619e:	464b      	mov	r3, r9
 80061a0:	1891      	adds	r1, r2, r2
 80061a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061a4:	415b      	adcs	r3, r3
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061ac:	4641      	mov	r1, r8
 80061ae:	1851      	adds	r1, r2, r1
 80061b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80061b2:	4649      	mov	r1, r9
 80061b4:	414b      	adcs	r3, r1
 80061b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061c4:	4659      	mov	r1, fp
 80061c6:	00cb      	lsls	r3, r1, #3
 80061c8:	4651      	mov	r1, sl
 80061ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ce:	4651      	mov	r1, sl
 80061d0:	00ca      	lsls	r2, r1, #3
 80061d2:	4610      	mov	r0, r2
 80061d4:	4619      	mov	r1, r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	4642      	mov	r2, r8
 80061da:	189b      	adds	r3, r3, r2
 80061dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061e0:	464b      	mov	r3, r9
 80061e2:	460a      	mov	r2, r1
 80061e4:	eb42 0303 	adc.w	r3, r2, r3
 80061e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006200:	460b      	mov	r3, r1
 8006202:	18db      	adds	r3, r3, r3
 8006204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006206:	4613      	mov	r3, r2
 8006208:	eb42 0303 	adc.w	r3, r2, r3
 800620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800620e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006216:	f7fa f833 	bl	8000280 <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4b0d      	ldr	r3, [pc, #52]	@ (8006254 <UART_SetConfig+0x2d4>)
 8006220:	fba3 1302 	umull	r1, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	2164      	movs	r1, #100	@ 0x64
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	3332      	adds	r3, #50	@ 0x32
 8006232:	4a08      	ldr	r2, [pc, #32]	@ (8006254 <UART_SetConfig+0x2d4>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f003 0207 	and.w	r2, r3, #7
 800623e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4422      	add	r2, r4
 8006246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006248:	e106      	b.n	8006458 <UART_SetConfig+0x4d8>
 800624a:	bf00      	nop
 800624c:	40011000 	.word	0x40011000
 8006250:	40011400 	.word	0x40011400
 8006254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800625c:	2200      	movs	r2, #0
 800625e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006262:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800626a:	4642      	mov	r2, r8
 800626c:	464b      	mov	r3, r9
 800626e:	1891      	adds	r1, r2, r2
 8006270:	6239      	str	r1, [r7, #32]
 8006272:	415b      	adcs	r3, r3
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
 8006276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800627a:	4641      	mov	r1, r8
 800627c:	1854      	adds	r4, r2, r1
 800627e:	4649      	mov	r1, r9
 8006280:	eb43 0501 	adc.w	r5, r3, r1
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	00eb      	lsls	r3, r5, #3
 800628e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006292:	00e2      	lsls	r2, r4, #3
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	4643      	mov	r3, r8
 800629a:	18e3      	adds	r3, r4, r3
 800629c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062a0:	464b      	mov	r3, r9
 80062a2:	eb45 0303 	adc.w	r3, r5, r3
 80062a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062c6:	4629      	mov	r1, r5
 80062c8:	008b      	lsls	r3, r1, #2
 80062ca:	4621      	mov	r1, r4
 80062cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d0:	4621      	mov	r1, r4
 80062d2:	008a      	lsls	r2, r1, #2
 80062d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062d8:	f7f9 ffd2 	bl	8000280 <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4b60      	ldr	r3, [pc, #384]	@ (8006464 <UART_SetConfig+0x4e4>)
 80062e2:	fba3 2302 	umull	r2, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	011c      	lsls	r4, r3, #4
 80062ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	1891      	adds	r1, r2, r2
 8006302:	61b9      	str	r1, [r7, #24]
 8006304:	415b      	adcs	r3, r3
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800630c:	4641      	mov	r1, r8
 800630e:	1851      	adds	r1, r2, r1
 8006310:	6139      	str	r1, [r7, #16]
 8006312:	4649      	mov	r1, r9
 8006314:	414b      	adcs	r3, r1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006324:	4659      	mov	r1, fp
 8006326:	00cb      	lsls	r3, r1, #3
 8006328:	4651      	mov	r1, sl
 800632a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632e:	4651      	mov	r1, sl
 8006330:	00ca      	lsls	r2, r1, #3
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	4603      	mov	r3, r0
 8006338:	4642      	mov	r2, r8
 800633a:	189b      	adds	r3, r3, r2
 800633c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006340:	464b      	mov	r3, r9
 8006342:	460a      	mov	r2, r1
 8006344:	eb42 0303 	adc.w	r3, r2, r3
 8006348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006356:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006364:	4649      	mov	r1, r9
 8006366:	008b      	lsls	r3, r1, #2
 8006368:	4641      	mov	r1, r8
 800636a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636e:	4641      	mov	r1, r8
 8006370:	008a      	lsls	r2, r1, #2
 8006372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006376:	f7f9 ff83 	bl	8000280 <__aeabi_uldivmod>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4611      	mov	r1, r2
 8006380:	4b38      	ldr	r3, [pc, #224]	@ (8006464 <UART_SetConfig+0x4e4>)
 8006382:	fba3 2301 	umull	r2, r3, r3, r1
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2264      	movs	r2, #100	@ 0x64
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	1acb      	subs	r3, r1, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	3332      	adds	r3, #50	@ 0x32
 8006394:	4a33      	ldr	r2, [pc, #204]	@ (8006464 <UART_SetConfig+0x4e4>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063a0:	441c      	add	r4, r3
 80063a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063a6:	2200      	movs	r2, #0
 80063a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80063aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80063ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	1891      	adds	r1, r2, r2
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	415b      	adcs	r3, r3
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063c0:	4641      	mov	r1, r8
 80063c2:	1851      	adds	r1, r2, r1
 80063c4:	6039      	str	r1, [r7, #0]
 80063c6:	4649      	mov	r1, r9
 80063c8:	414b      	adcs	r3, r1
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063d8:	4659      	mov	r1, fp
 80063da:	00cb      	lsls	r3, r1, #3
 80063dc:	4651      	mov	r1, sl
 80063de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e2:	4651      	mov	r1, sl
 80063e4:	00ca      	lsls	r2, r1, #3
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	4642      	mov	r2, r8
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063f2:	464b      	mov	r3, r9
 80063f4:	460a      	mov	r2, r1
 80063f6:	eb42 0303 	adc.w	r3, r2, r3
 80063fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	663b      	str	r3, [r7, #96]	@ 0x60
 8006406:	667a      	str	r2, [r7, #100]	@ 0x64
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006414:	4649      	mov	r1, r9
 8006416:	008b      	lsls	r3, r1, #2
 8006418:	4641      	mov	r1, r8
 800641a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800641e:	4641      	mov	r1, r8
 8006420:	008a      	lsls	r2, r1, #2
 8006422:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006426:	f7f9 ff2b 	bl	8000280 <__aeabi_uldivmod>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <UART_SetConfig+0x4e4>)
 8006430:	fba3 1302 	umull	r1, r3, r3, r2
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	2164      	movs	r1, #100	@ 0x64
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	3332      	adds	r3, #50	@ 0x32
 8006442:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <UART_SetConfig+0x4e4>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	f003 020f 	and.w	r2, r3, #15
 800644e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4422      	add	r2, r4
 8006456:	609a      	str	r2, [r3, #8]
}
 8006458:	bf00      	nop
 800645a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800645e:	46bd      	mov	sp, r7
 8006460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006464:	51eb851f 	.word	0x51eb851f

08006468 <std>:
 8006468:	2300      	movs	r3, #0
 800646a:	b510      	push	{r4, lr}
 800646c:	4604      	mov	r4, r0
 800646e:	e9c0 3300 	strd	r3, r3, [r0]
 8006472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006476:	6083      	str	r3, [r0, #8]
 8006478:	8181      	strh	r1, [r0, #12]
 800647a:	6643      	str	r3, [r0, #100]	@ 0x64
 800647c:	81c2      	strh	r2, [r0, #14]
 800647e:	6183      	str	r3, [r0, #24]
 8006480:	4619      	mov	r1, r3
 8006482:	2208      	movs	r2, #8
 8006484:	305c      	adds	r0, #92	@ 0x5c
 8006486:	f000 fa09 	bl	800689c <memset>
 800648a:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <std+0x58>)
 800648c:	6263      	str	r3, [r4, #36]	@ 0x24
 800648e:	4b0d      	ldr	r3, [pc, #52]	@ (80064c4 <std+0x5c>)
 8006490:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006492:	4b0d      	ldr	r3, [pc, #52]	@ (80064c8 <std+0x60>)
 8006494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006496:	4b0d      	ldr	r3, [pc, #52]	@ (80064cc <std+0x64>)
 8006498:	6323      	str	r3, [r4, #48]	@ 0x30
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <std+0x68>)
 800649c:	6224      	str	r4, [r4, #32]
 800649e:	429c      	cmp	r4, r3
 80064a0:	d006      	beq.n	80064b0 <std+0x48>
 80064a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064a6:	4294      	cmp	r4, r2
 80064a8:	d002      	beq.n	80064b0 <std+0x48>
 80064aa:	33d0      	adds	r3, #208	@ 0xd0
 80064ac:	429c      	cmp	r4, r3
 80064ae:	d105      	bne.n	80064bc <std+0x54>
 80064b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b8:	f000 ba68 	b.w	800698c <__retarget_lock_init_recursive>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	bf00      	nop
 80064c0:	080066cd 	.word	0x080066cd
 80064c4:	080066ef 	.word	0x080066ef
 80064c8:	08006727 	.word	0x08006727
 80064cc:	0800674b 	.word	0x0800674b
 80064d0:	200037b0 	.word	0x200037b0

080064d4 <stdio_exit_handler>:
 80064d4:	4a02      	ldr	r2, [pc, #8]	@ (80064e0 <stdio_exit_handler+0xc>)
 80064d6:	4903      	ldr	r1, [pc, #12]	@ (80064e4 <stdio_exit_handler+0x10>)
 80064d8:	4803      	ldr	r0, [pc, #12]	@ (80064e8 <stdio_exit_handler+0x14>)
 80064da:	f000 b869 	b.w	80065b0 <_fwalk_sglue>
 80064de:	bf00      	nop
 80064e0:	20000010 	.word	0x20000010
 80064e4:	08007245 	.word	0x08007245
 80064e8:	20000020 	.word	0x20000020

080064ec <cleanup_stdio>:
 80064ec:	6841      	ldr	r1, [r0, #4]
 80064ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006520 <cleanup_stdio+0x34>)
 80064f0:	4299      	cmp	r1, r3
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	d001      	beq.n	80064fc <cleanup_stdio+0x10>
 80064f8:	f000 fea4 	bl	8007244 <_fflush_r>
 80064fc:	68a1      	ldr	r1, [r4, #8]
 80064fe:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <cleanup_stdio+0x38>)
 8006500:	4299      	cmp	r1, r3
 8006502:	d002      	beq.n	800650a <cleanup_stdio+0x1e>
 8006504:	4620      	mov	r0, r4
 8006506:	f000 fe9d 	bl	8007244 <_fflush_r>
 800650a:	68e1      	ldr	r1, [r4, #12]
 800650c:	4b06      	ldr	r3, [pc, #24]	@ (8006528 <cleanup_stdio+0x3c>)
 800650e:	4299      	cmp	r1, r3
 8006510:	d004      	beq.n	800651c <cleanup_stdio+0x30>
 8006512:	4620      	mov	r0, r4
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006518:	f000 be94 	b.w	8007244 <_fflush_r>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	bf00      	nop
 8006520:	200037b0 	.word	0x200037b0
 8006524:	20003818 	.word	0x20003818
 8006528:	20003880 	.word	0x20003880

0800652c <global_stdio_init.part.0>:
 800652c:	b510      	push	{r4, lr}
 800652e:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <global_stdio_init.part.0+0x30>)
 8006530:	4c0b      	ldr	r4, [pc, #44]	@ (8006560 <global_stdio_init.part.0+0x34>)
 8006532:	4a0c      	ldr	r2, [pc, #48]	@ (8006564 <global_stdio_init.part.0+0x38>)
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	4620      	mov	r0, r4
 8006538:	2200      	movs	r2, #0
 800653a:	2104      	movs	r1, #4
 800653c:	f7ff ff94 	bl	8006468 <std>
 8006540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006544:	2201      	movs	r2, #1
 8006546:	2109      	movs	r1, #9
 8006548:	f7ff ff8e 	bl	8006468 <std>
 800654c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006550:	2202      	movs	r2, #2
 8006552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006556:	2112      	movs	r1, #18
 8006558:	f7ff bf86 	b.w	8006468 <std>
 800655c:	200038e8 	.word	0x200038e8
 8006560:	200037b0 	.word	0x200037b0
 8006564:	080064d5 	.word	0x080064d5

08006568 <__sfp_lock_acquire>:
 8006568:	4801      	ldr	r0, [pc, #4]	@ (8006570 <__sfp_lock_acquire+0x8>)
 800656a:	f000 ba10 	b.w	800698e <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	200038f1 	.word	0x200038f1

08006574 <__sfp_lock_release>:
 8006574:	4801      	ldr	r0, [pc, #4]	@ (800657c <__sfp_lock_release+0x8>)
 8006576:	f000 ba0b 	b.w	8006990 <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	200038f1 	.word	0x200038f1

08006580 <__sinit>:
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
 8006584:	f7ff fff0 	bl	8006568 <__sfp_lock_acquire>
 8006588:	6a23      	ldr	r3, [r4, #32]
 800658a:	b11b      	cbz	r3, 8006594 <__sinit+0x14>
 800658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006590:	f7ff bff0 	b.w	8006574 <__sfp_lock_release>
 8006594:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <__sinit+0x28>)
 8006596:	6223      	str	r3, [r4, #32]
 8006598:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <__sinit+0x2c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f5      	bne.n	800658c <__sinit+0xc>
 80065a0:	f7ff ffc4 	bl	800652c <global_stdio_init.part.0>
 80065a4:	e7f2      	b.n	800658c <__sinit+0xc>
 80065a6:	bf00      	nop
 80065a8:	080064ed 	.word	0x080064ed
 80065ac:	200038e8 	.word	0x200038e8

080065b0 <_fwalk_sglue>:
 80065b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b4:	4607      	mov	r7, r0
 80065b6:	4688      	mov	r8, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	2600      	movs	r6, #0
 80065bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065c0:	f1b9 0901 	subs.w	r9, r9, #1
 80065c4:	d505      	bpl.n	80065d2 <_fwalk_sglue+0x22>
 80065c6:	6824      	ldr	r4, [r4, #0]
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	d1f7      	bne.n	80065bc <_fwalk_sglue+0xc>
 80065cc:	4630      	mov	r0, r6
 80065ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d907      	bls.n	80065e8 <_fwalk_sglue+0x38>
 80065d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065dc:	3301      	adds	r3, #1
 80065de:	d003      	beq.n	80065e8 <_fwalk_sglue+0x38>
 80065e0:	4629      	mov	r1, r5
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	4306      	orrs	r6, r0
 80065e8:	3568      	adds	r5, #104	@ 0x68
 80065ea:	e7e9      	b.n	80065c0 <_fwalk_sglue+0x10>

080065ec <iprintf>:
 80065ec:	b40f      	push	{r0, r1, r2, r3}
 80065ee:	b507      	push	{r0, r1, r2, lr}
 80065f0:	4906      	ldr	r1, [pc, #24]	@ (800660c <iprintf+0x20>)
 80065f2:	ab04      	add	r3, sp, #16
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fa:	6881      	ldr	r1, [r0, #8]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	f000 faf9 	bl	8006bf4 <_vfiprintf_r>
 8006602:	b003      	add	sp, #12
 8006604:	f85d eb04 	ldr.w	lr, [sp], #4
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr
 800660c:	2000001c 	.word	0x2000001c

08006610 <_puts_r>:
 8006610:	6a03      	ldr	r3, [r0, #32]
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	6884      	ldr	r4, [r0, #8]
 8006616:	4605      	mov	r5, r0
 8006618:	460e      	mov	r6, r1
 800661a:	b90b      	cbnz	r3, 8006620 <_puts_r+0x10>
 800661c:	f7ff ffb0 	bl	8006580 <__sinit>
 8006620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006622:	07db      	lsls	r3, r3, #31
 8006624:	d405      	bmi.n	8006632 <_puts_r+0x22>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	0598      	lsls	r0, r3, #22
 800662a:	d402      	bmi.n	8006632 <_puts_r+0x22>
 800662c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800662e:	f000 f9ae 	bl	800698e <__retarget_lock_acquire_recursive>
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	0719      	lsls	r1, r3, #28
 8006636:	d502      	bpl.n	800663e <_puts_r+0x2e>
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d135      	bne.n	80066aa <_puts_r+0x9a>
 800663e:	4621      	mov	r1, r4
 8006640:	4628      	mov	r0, r5
 8006642:	f000 f8c5 	bl	80067d0 <__swsetup_r>
 8006646:	b380      	cbz	r0, 80066aa <_puts_r+0x9a>
 8006648:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800664c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800664e:	07da      	lsls	r2, r3, #31
 8006650:	d405      	bmi.n	800665e <_puts_r+0x4e>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	059b      	lsls	r3, r3, #22
 8006656:	d402      	bmi.n	800665e <_puts_r+0x4e>
 8006658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800665a:	f000 f999 	bl	8006990 <__retarget_lock_release_recursive>
 800665e:	4628      	mov	r0, r5
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	2b00      	cmp	r3, #0
 8006664:	da04      	bge.n	8006670 <_puts_r+0x60>
 8006666:	69a2      	ldr	r2, [r4, #24]
 8006668:	429a      	cmp	r2, r3
 800666a:	dc17      	bgt.n	800669c <_puts_r+0x8c>
 800666c:	290a      	cmp	r1, #10
 800666e:	d015      	beq.n	800669c <_puts_r+0x8c>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	6022      	str	r2, [r4, #0]
 8006676:	7019      	strb	r1, [r3, #0]
 8006678:	68a3      	ldr	r3, [r4, #8]
 800667a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800667e:	3b01      	subs	r3, #1
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	2900      	cmp	r1, #0
 8006684:	d1ed      	bne.n	8006662 <_puts_r+0x52>
 8006686:	2b00      	cmp	r3, #0
 8006688:	da11      	bge.n	80066ae <_puts_r+0x9e>
 800668a:	4622      	mov	r2, r4
 800668c:	210a      	movs	r1, #10
 800668e:	4628      	mov	r0, r5
 8006690:	f000 f85f 	bl	8006752 <__swbuf_r>
 8006694:	3001      	adds	r0, #1
 8006696:	d0d7      	beq.n	8006648 <_puts_r+0x38>
 8006698:	250a      	movs	r5, #10
 800669a:	e7d7      	b.n	800664c <_puts_r+0x3c>
 800669c:	4622      	mov	r2, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 f857 	bl	8006752 <__swbuf_r>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d1e7      	bne.n	8006678 <_puts_r+0x68>
 80066a8:	e7ce      	b.n	8006648 <_puts_r+0x38>
 80066aa:	3e01      	subs	r6, #1
 80066ac:	e7e4      	b.n	8006678 <_puts_r+0x68>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	6022      	str	r2, [r4, #0]
 80066b4:	220a      	movs	r2, #10
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e7ee      	b.n	8006698 <_puts_r+0x88>
	...

080066bc <puts>:
 80066bc:	4b02      	ldr	r3, [pc, #8]	@ (80066c8 <puts+0xc>)
 80066be:	4601      	mov	r1, r0
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	f7ff bfa5 	b.w	8006610 <_puts_r>
 80066c6:	bf00      	nop
 80066c8:	2000001c 	.word	0x2000001c

080066cc <__sread>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	460c      	mov	r4, r1
 80066d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d4:	f000 f90c 	bl	80068f0 <_read_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	bfab      	itete	ge
 80066dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066de:	89a3      	ldrhlt	r3, [r4, #12]
 80066e0:	181b      	addge	r3, r3, r0
 80066e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066e6:	bfac      	ite	ge
 80066e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066ea:	81a3      	strhlt	r3, [r4, #12]
 80066ec:	bd10      	pop	{r4, pc}

080066ee <__swrite>:
 80066ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f2:	461f      	mov	r7, r3
 80066f4:	898b      	ldrh	r3, [r1, #12]
 80066f6:	05db      	lsls	r3, r3, #23
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	4616      	mov	r6, r2
 80066fe:	d505      	bpl.n	800670c <__swrite+0x1e>
 8006700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006704:	2302      	movs	r3, #2
 8006706:	2200      	movs	r2, #0
 8006708:	f000 f8e0 	bl	80068cc <_lseek_r>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	4632      	mov	r2, r6
 800671a:	463b      	mov	r3, r7
 800671c:	4628      	mov	r0, r5
 800671e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006722:	f000 b8f7 	b.w	8006914 <_write_r>

08006726 <__sseek>:
 8006726:	b510      	push	{r4, lr}
 8006728:	460c      	mov	r4, r1
 800672a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672e:	f000 f8cd 	bl	80068cc <_lseek_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	bf15      	itete	ne
 8006738:	6560      	strne	r0, [r4, #84]	@ 0x54
 800673a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800673e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006742:	81a3      	strheq	r3, [r4, #12]
 8006744:	bf18      	it	ne
 8006746:	81a3      	strhne	r3, [r4, #12]
 8006748:	bd10      	pop	{r4, pc}

0800674a <__sclose>:
 800674a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674e:	f000 b8ad 	b.w	80068ac <_close_r>

08006752 <__swbuf_r>:
 8006752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006754:	460e      	mov	r6, r1
 8006756:	4614      	mov	r4, r2
 8006758:	4605      	mov	r5, r0
 800675a:	b118      	cbz	r0, 8006764 <__swbuf_r+0x12>
 800675c:	6a03      	ldr	r3, [r0, #32]
 800675e:	b90b      	cbnz	r3, 8006764 <__swbuf_r+0x12>
 8006760:	f7ff ff0e 	bl	8006580 <__sinit>
 8006764:	69a3      	ldr	r3, [r4, #24]
 8006766:	60a3      	str	r3, [r4, #8]
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	071a      	lsls	r2, r3, #28
 800676c:	d501      	bpl.n	8006772 <__swbuf_r+0x20>
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	b943      	cbnz	r3, 8006784 <__swbuf_r+0x32>
 8006772:	4621      	mov	r1, r4
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f82b 	bl	80067d0 <__swsetup_r>
 800677a:	b118      	cbz	r0, 8006784 <__swbuf_r+0x32>
 800677c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006780:	4638      	mov	r0, r7
 8006782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	6922      	ldr	r2, [r4, #16]
 8006788:	1a98      	subs	r0, r3, r2
 800678a:	6963      	ldr	r3, [r4, #20]
 800678c:	b2f6      	uxtb	r6, r6
 800678e:	4283      	cmp	r3, r0
 8006790:	4637      	mov	r7, r6
 8006792:	dc05      	bgt.n	80067a0 <__swbuf_r+0x4e>
 8006794:	4621      	mov	r1, r4
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fd54 	bl	8007244 <_fflush_r>
 800679c:	2800      	cmp	r0, #0
 800679e:	d1ed      	bne.n	800677c <__swbuf_r+0x2a>
 80067a0:	68a3      	ldr	r3, [r4, #8]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	60a3      	str	r3, [r4, #8]
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	6022      	str	r2, [r4, #0]
 80067ac:	701e      	strb	r6, [r3, #0]
 80067ae:	6962      	ldr	r2, [r4, #20]
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d004      	beq.n	80067c0 <__swbuf_r+0x6e>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	07db      	lsls	r3, r3, #31
 80067ba:	d5e1      	bpl.n	8006780 <__swbuf_r+0x2e>
 80067bc:	2e0a      	cmp	r6, #10
 80067be:	d1df      	bne.n	8006780 <__swbuf_r+0x2e>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 fd3e 	bl	8007244 <_fflush_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d0d9      	beq.n	8006780 <__swbuf_r+0x2e>
 80067cc:	e7d6      	b.n	800677c <__swbuf_r+0x2a>
	...

080067d0 <__swsetup_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4b29      	ldr	r3, [pc, #164]	@ (8006878 <__swsetup_r+0xa8>)
 80067d4:	4605      	mov	r5, r0
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	460c      	mov	r4, r1
 80067da:	b118      	cbz	r0, 80067e4 <__swsetup_r+0x14>
 80067dc:	6a03      	ldr	r3, [r0, #32]
 80067de:	b90b      	cbnz	r3, 80067e4 <__swsetup_r+0x14>
 80067e0:	f7ff fece 	bl	8006580 <__sinit>
 80067e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e8:	0719      	lsls	r1, r3, #28
 80067ea:	d422      	bmi.n	8006832 <__swsetup_r+0x62>
 80067ec:	06da      	lsls	r2, r3, #27
 80067ee:	d407      	bmi.n	8006800 <__swsetup_r+0x30>
 80067f0:	2209      	movs	r2, #9
 80067f2:	602a      	str	r2, [r5, #0]
 80067f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067fe:	e033      	b.n	8006868 <__swsetup_r+0x98>
 8006800:	0758      	lsls	r0, r3, #29
 8006802:	d512      	bpl.n	800682a <__swsetup_r+0x5a>
 8006804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006806:	b141      	cbz	r1, 800681a <__swsetup_r+0x4a>
 8006808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800680c:	4299      	cmp	r1, r3
 800680e:	d002      	beq.n	8006816 <__swsetup_r+0x46>
 8006810:	4628      	mov	r0, r5
 8006812:	f000 f8cd 	bl	80069b0 <_free_r>
 8006816:	2300      	movs	r3, #0
 8006818:	6363      	str	r3, [r4, #52]	@ 0x34
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	2300      	movs	r3, #0
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f043 0308 	orr.w	r3, r3, #8
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	b94b      	cbnz	r3, 800684a <__swsetup_r+0x7a>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800683c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006840:	d003      	beq.n	800684a <__swsetup_r+0x7a>
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f000 fd4b 	bl	80072e0 <__smakebuf_r>
 800684a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800684e:	f013 0201 	ands.w	r2, r3, #1
 8006852:	d00a      	beq.n	800686a <__swsetup_r+0x9a>
 8006854:	2200      	movs	r2, #0
 8006856:	60a2      	str	r2, [r4, #8]
 8006858:	6962      	ldr	r2, [r4, #20]
 800685a:	4252      	negs	r2, r2
 800685c:	61a2      	str	r2, [r4, #24]
 800685e:	6922      	ldr	r2, [r4, #16]
 8006860:	b942      	cbnz	r2, 8006874 <__swsetup_r+0xa4>
 8006862:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006866:	d1c5      	bne.n	80067f4 <__swsetup_r+0x24>
 8006868:	bd38      	pop	{r3, r4, r5, pc}
 800686a:	0799      	lsls	r1, r3, #30
 800686c:	bf58      	it	pl
 800686e:	6962      	ldrpl	r2, [r4, #20]
 8006870:	60a2      	str	r2, [r4, #8]
 8006872:	e7f4      	b.n	800685e <__swsetup_r+0x8e>
 8006874:	2000      	movs	r0, #0
 8006876:	e7f7      	b.n	8006868 <__swsetup_r+0x98>
 8006878:	2000001c 	.word	0x2000001c

0800687c <memcmp>:
 800687c:	b510      	push	{r4, lr}
 800687e:	3901      	subs	r1, #1
 8006880:	4402      	add	r2, r0
 8006882:	4290      	cmp	r0, r2
 8006884:	d101      	bne.n	800688a <memcmp+0xe>
 8006886:	2000      	movs	r0, #0
 8006888:	e005      	b.n	8006896 <memcmp+0x1a>
 800688a:	7803      	ldrb	r3, [r0, #0]
 800688c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006890:	42a3      	cmp	r3, r4
 8006892:	d001      	beq.n	8006898 <memcmp+0x1c>
 8006894:	1b18      	subs	r0, r3, r4
 8006896:	bd10      	pop	{r4, pc}
 8006898:	3001      	adds	r0, #1
 800689a:	e7f2      	b.n	8006882 <memcmp+0x6>

0800689c <memset>:
 800689c:	4402      	add	r2, r0
 800689e:	4603      	mov	r3, r0
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d100      	bne.n	80068a6 <memset+0xa>
 80068a4:	4770      	bx	lr
 80068a6:	f803 1b01 	strb.w	r1, [r3], #1
 80068aa:	e7f9      	b.n	80068a0 <memset+0x4>

080068ac <_close_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d06      	ldr	r5, [pc, #24]	@ (80068c8 <_close_r+0x1c>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	602b      	str	r3, [r5, #0]
 80068b8:	f7fc fd4d 	bl	8003356 <_close>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_close_r+0x1a>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_close_r+0x1a>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	200038ec 	.word	0x200038ec

080068cc <_lseek_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d07      	ldr	r5, [pc, #28]	@ (80068ec <_lseek_r+0x20>)
 80068d0:	4604      	mov	r4, r0
 80068d2:	4608      	mov	r0, r1
 80068d4:	4611      	mov	r1, r2
 80068d6:	2200      	movs	r2, #0
 80068d8:	602a      	str	r2, [r5, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	f7fc fd62 	bl	80033a4 <_lseek>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_lseek_r+0x1e>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_lseek_r+0x1e>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	200038ec 	.word	0x200038ec

080068f0 <_read_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4d07      	ldr	r5, [pc, #28]	@ (8006910 <_read_r+0x20>)
 80068f4:	4604      	mov	r4, r0
 80068f6:	4608      	mov	r0, r1
 80068f8:	4611      	mov	r1, r2
 80068fa:	2200      	movs	r2, #0
 80068fc:	602a      	str	r2, [r5, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	f7fc fcf0 	bl	80032e4 <_read>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_read_r+0x1e>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_read_r+0x1e>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	200038ec 	.word	0x200038ec

08006914 <_write_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d07      	ldr	r5, [pc, #28]	@ (8006934 <_write_r+0x20>)
 8006918:	4604      	mov	r4, r0
 800691a:	4608      	mov	r0, r1
 800691c:	4611      	mov	r1, r2
 800691e:	2200      	movs	r2, #0
 8006920:	602a      	str	r2, [r5, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	f7fc fcfb 	bl	800331e <_write>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_write_r+0x1e>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_write_r+0x1e>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	200038ec 	.word	0x200038ec

08006938 <__errno>:
 8006938:	4b01      	ldr	r3, [pc, #4]	@ (8006940 <__errno+0x8>)
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	2000001c 	.word	0x2000001c

08006944 <__libc_init_array>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4d0d      	ldr	r5, [pc, #52]	@ (800697c <__libc_init_array+0x38>)
 8006948:	4c0d      	ldr	r4, [pc, #52]	@ (8006980 <__libc_init_array+0x3c>)
 800694a:	1b64      	subs	r4, r4, r5
 800694c:	10a4      	asrs	r4, r4, #2
 800694e:	2600      	movs	r6, #0
 8006950:	42a6      	cmp	r6, r4
 8006952:	d109      	bne.n	8006968 <__libc_init_array+0x24>
 8006954:	4d0b      	ldr	r5, [pc, #44]	@ (8006984 <__libc_init_array+0x40>)
 8006956:	4c0c      	ldr	r4, [pc, #48]	@ (8006988 <__libc_init_array+0x44>)
 8006958:	f000 fd30 	bl	80073bc <_init>
 800695c:	1b64      	subs	r4, r4, r5
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	2600      	movs	r6, #0
 8006962:	42a6      	cmp	r6, r4
 8006964:	d105      	bne.n	8006972 <__libc_init_array+0x2e>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	f855 3b04 	ldr.w	r3, [r5], #4
 800696c:	4798      	blx	r3
 800696e:	3601      	adds	r6, #1
 8006970:	e7ee      	b.n	8006950 <__libc_init_array+0xc>
 8006972:	f855 3b04 	ldr.w	r3, [r5], #4
 8006976:	4798      	blx	r3
 8006978:	3601      	adds	r6, #1
 800697a:	e7f2      	b.n	8006962 <__libc_init_array+0x1e>
 800697c:	08007554 	.word	0x08007554
 8006980:	08007554 	.word	0x08007554
 8006984:	08007554 	.word	0x08007554
 8006988:	08007558 	.word	0x08007558

0800698c <__retarget_lock_init_recursive>:
 800698c:	4770      	bx	lr

0800698e <__retarget_lock_acquire_recursive>:
 800698e:	4770      	bx	lr

08006990 <__retarget_lock_release_recursive>:
 8006990:	4770      	bx	lr

08006992 <memcpy>:
 8006992:	440a      	add	r2, r1
 8006994:	4291      	cmp	r1, r2
 8006996:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800699a:	d100      	bne.n	800699e <memcpy+0xc>
 800699c:	4770      	bx	lr
 800699e:	b510      	push	{r4, lr}
 80069a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a8:	4291      	cmp	r1, r2
 80069aa:	d1f9      	bne.n	80069a0 <memcpy+0xe>
 80069ac:	bd10      	pop	{r4, pc}
	...

080069b0 <_free_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4605      	mov	r5, r0
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d041      	beq.n	8006a3c <_free_r+0x8c>
 80069b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069bc:	1f0c      	subs	r4, r1, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfb8      	it	lt
 80069c2:	18e4      	addlt	r4, r4, r3
 80069c4:	f000 f8e0 	bl	8006b88 <__malloc_lock>
 80069c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a40 <_free_r+0x90>)
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	b933      	cbnz	r3, 80069dc <_free_r+0x2c>
 80069ce:	6063      	str	r3, [r4, #4]
 80069d0:	6014      	str	r4, [r2, #0]
 80069d2:	4628      	mov	r0, r5
 80069d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d8:	f000 b8dc 	b.w	8006b94 <__malloc_unlock>
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d908      	bls.n	80069f2 <_free_r+0x42>
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	1821      	adds	r1, r4, r0
 80069e4:	428b      	cmp	r3, r1
 80069e6:	bf01      	itttt	eq
 80069e8:	6819      	ldreq	r1, [r3, #0]
 80069ea:	685b      	ldreq	r3, [r3, #4]
 80069ec:	1809      	addeq	r1, r1, r0
 80069ee:	6021      	streq	r1, [r4, #0]
 80069f0:	e7ed      	b.n	80069ce <_free_r+0x1e>
 80069f2:	461a      	mov	r2, r3
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	b10b      	cbz	r3, 80069fc <_free_r+0x4c>
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d9fa      	bls.n	80069f2 <_free_r+0x42>
 80069fc:	6811      	ldr	r1, [r2, #0]
 80069fe:	1850      	adds	r0, r2, r1
 8006a00:	42a0      	cmp	r0, r4
 8006a02:	d10b      	bne.n	8006a1c <_free_r+0x6c>
 8006a04:	6820      	ldr	r0, [r4, #0]
 8006a06:	4401      	add	r1, r0
 8006a08:	1850      	adds	r0, r2, r1
 8006a0a:	4283      	cmp	r3, r0
 8006a0c:	6011      	str	r1, [r2, #0]
 8006a0e:	d1e0      	bne.n	80069d2 <_free_r+0x22>
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	6053      	str	r3, [r2, #4]
 8006a16:	4408      	add	r0, r1
 8006a18:	6010      	str	r0, [r2, #0]
 8006a1a:	e7da      	b.n	80069d2 <_free_r+0x22>
 8006a1c:	d902      	bls.n	8006a24 <_free_r+0x74>
 8006a1e:	230c      	movs	r3, #12
 8006a20:	602b      	str	r3, [r5, #0]
 8006a22:	e7d6      	b.n	80069d2 <_free_r+0x22>
 8006a24:	6820      	ldr	r0, [r4, #0]
 8006a26:	1821      	adds	r1, r4, r0
 8006a28:	428b      	cmp	r3, r1
 8006a2a:	bf04      	itt	eq
 8006a2c:	6819      	ldreq	r1, [r3, #0]
 8006a2e:	685b      	ldreq	r3, [r3, #4]
 8006a30:	6063      	str	r3, [r4, #4]
 8006a32:	bf04      	itt	eq
 8006a34:	1809      	addeq	r1, r1, r0
 8006a36:	6021      	streq	r1, [r4, #0]
 8006a38:	6054      	str	r4, [r2, #4]
 8006a3a:	e7ca      	b.n	80069d2 <_free_r+0x22>
 8006a3c:	bd38      	pop	{r3, r4, r5, pc}
 8006a3e:	bf00      	nop
 8006a40:	200038f8 	.word	0x200038f8

08006a44 <sbrk_aligned>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4e0f      	ldr	r6, [pc, #60]	@ (8006a84 <sbrk_aligned+0x40>)
 8006a48:	460c      	mov	r4, r1
 8006a4a:	6831      	ldr	r1, [r6, #0]
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	b911      	cbnz	r1, 8006a56 <sbrk_aligned+0x12>
 8006a50:	f000 fca4 	bl	800739c <_sbrk_r>
 8006a54:	6030      	str	r0, [r6, #0]
 8006a56:	4621      	mov	r1, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 fc9f 	bl	800739c <_sbrk_r>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d103      	bne.n	8006a6a <sbrk_aligned+0x26>
 8006a62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a66:	4620      	mov	r0, r4
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	1cc4      	adds	r4, r0, #3
 8006a6c:	f024 0403 	bic.w	r4, r4, #3
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d0f8      	beq.n	8006a66 <sbrk_aligned+0x22>
 8006a74:	1a21      	subs	r1, r4, r0
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fc90 	bl	800739c <_sbrk_r>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d1f2      	bne.n	8006a66 <sbrk_aligned+0x22>
 8006a80:	e7ef      	b.n	8006a62 <sbrk_aligned+0x1e>
 8006a82:	bf00      	nop
 8006a84:	200038f4 	.word	0x200038f4

08006a88 <_malloc_r>:
 8006a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a8c:	1ccd      	adds	r5, r1, #3
 8006a8e:	f025 0503 	bic.w	r5, r5, #3
 8006a92:	3508      	adds	r5, #8
 8006a94:	2d0c      	cmp	r5, #12
 8006a96:	bf38      	it	cc
 8006a98:	250c      	movcc	r5, #12
 8006a9a:	2d00      	cmp	r5, #0
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	db01      	blt.n	8006aa4 <_malloc_r+0x1c>
 8006aa0:	42a9      	cmp	r1, r5
 8006aa2:	d904      	bls.n	8006aae <_malloc_r+0x26>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	6033      	str	r3, [r6, #0]
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b84 <_malloc_r+0xfc>
 8006ab2:	f000 f869 	bl	8006b88 <__malloc_lock>
 8006ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aba:	461c      	mov	r4, r3
 8006abc:	bb44      	cbnz	r4, 8006b10 <_malloc_r+0x88>
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff ffbf 	bl	8006a44 <sbrk_aligned>
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	4604      	mov	r4, r0
 8006aca:	d158      	bne.n	8006b7e <_malloc_r+0xf6>
 8006acc:	f8d8 4000 	ldr.w	r4, [r8]
 8006ad0:	4627      	mov	r7, r4
 8006ad2:	2f00      	cmp	r7, #0
 8006ad4:	d143      	bne.n	8006b5e <_malloc_r+0xd6>
 8006ad6:	2c00      	cmp	r4, #0
 8006ad8:	d04b      	beq.n	8006b72 <_malloc_r+0xea>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	4639      	mov	r1, r7
 8006ade:	4630      	mov	r0, r6
 8006ae0:	eb04 0903 	add.w	r9, r4, r3
 8006ae4:	f000 fc5a 	bl	800739c <_sbrk_r>
 8006ae8:	4581      	cmp	r9, r0
 8006aea:	d142      	bne.n	8006b72 <_malloc_r+0xea>
 8006aec:	6821      	ldr	r1, [r4, #0]
 8006aee:	1a6d      	subs	r5, r5, r1
 8006af0:	4629      	mov	r1, r5
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7ff ffa6 	bl	8006a44 <sbrk_aligned>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d03a      	beq.n	8006b72 <_malloc_r+0xea>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	442b      	add	r3, r5
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	f8d8 3000 	ldr.w	r3, [r8]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	bb62      	cbnz	r2, 8006b64 <_malloc_r+0xdc>
 8006b0a:	f8c8 7000 	str.w	r7, [r8]
 8006b0e:	e00f      	b.n	8006b30 <_malloc_r+0xa8>
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	1b52      	subs	r2, r2, r5
 8006b14:	d420      	bmi.n	8006b58 <_malloc_r+0xd0>
 8006b16:	2a0b      	cmp	r2, #11
 8006b18:	d917      	bls.n	8006b4a <_malloc_r+0xc2>
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	6025      	str	r5, [r4, #0]
 8006b20:	bf18      	it	ne
 8006b22:	6059      	strne	r1, [r3, #4]
 8006b24:	6863      	ldr	r3, [r4, #4]
 8006b26:	bf08      	it	eq
 8006b28:	f8c8 1000 	streq.w	r1, [r8]
 8006b2c:	5162      	str	r2, [r4, r5]
 8006b2e:	604b      	str	r3, [r1, #4]
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 f82f 	bl	8006b94 <__malloc_unlock>
 8006b36:	f104 000b 	add.w	r0, r4, #11
 8006b3a:	1d23      	adds	r3, r4, #4
 8006b3c:	f020 0007 	bic.w	r0, r0, #7
 8006b40:	1ac2      	subs	r2, r0, r3
 8006b42:	bf1c      	itt	ne
 8006b44:	1a1b      	subne	r3, r3, r0
 8006b46:	50a3      	strne	r3, [r4, r2]
 8006b48:	e7af      	b.n	8006aaa <_malloc_r+0x22>
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	bf0c      	ite	eq
 8006b50:	f8c8 2000 	streq.w	r2, [r8]
 8006b54:	605a      	strne	r2, [r3, #4]
 8006b56:	e7eb      	b.n	8006b30 <_malloc_r+0xa8>
 8006b58:	4623      	mov	r3, r4
 8006b5a:	6864      	ldr	r4, [r4, #4]
 8006b5c:	e7ae      	b.n	8006abc <_malloc_r+0x34>
 8006b5e:	463c      	mov	r4, r7
 8006b60:	687f      	ldr	r7, [r7, #4]
 8006b62:	e7b6      	b.n	8006ad2 <_malloc_r+0x4a>
 8006b64:	461a      	mov	r2, r3
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	d1fb      	bne.n	8006b64 <_malloc_r+0xdc>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6053      	str	r3, [r2, #4]
 8006b70:	e7de      	b.n	8006b30 <_malloc_r+0xa8>
 8006b72:	230c      	movs	r3, #12
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	4630      	mov	r0, r6
 8006b78:	f000 f80c 	bl	8006b94 <__malloc_unlock>
 8006b7c:	e794      	b.n	8006aa8 <_malloc_r+0x20>
 8006b7e:	6005      	str	r5, [r0, #0]
 8006b80:	e7d6      	b.n	8006b30 <_malloc_r+0xa8>
 8006b82:	bf00      	nop
 8006b84:	200038f8 	.word	0x200038f8

08006b88 <__malloc_lock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	@ (8006b90 <__malloc_lock+0x8>)
 8006b8a:	f7ff bf00 	b.w	800698e <__retarget_lock_acquire_recursive>
 8006b8e:	bf00      	nop
 8006b90:	200038f0 	.word	0x200038f0

08006b94 <__malloc_unlock>:
 8006b94:	4801      	ldr	r0, [pc, #4]	@ (8006b9c <__malloc_unlock+0x8>)
 8006b96:	f7ff befb 	b.w	8006990 <__retarget_lock_release_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	200038f0 	.word	0x200038f0

08006ba0 <__sfputc_r>:
 8006ba0:	6893      	ldr	r3, [r2, #8]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	b410      	push	{r4}
 8006ba8:	6093      	str	r3, [r2, #8]
 8006baa:	da08      	bge.n	8006bbe <__sfputc_r+0x1e>
 8006bac:	6994      	ldr	r4, [r2, #24]
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	db01      	blt.n	8006bb6 <__sfputc_r+0x16>
 8006bb2:	290a      	cmp	r1, #10
 8006bb4:	d103      	bne.n	8006bbe <__sfputc_r+0x1e>
 8006bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bba:	f7ff bdca 	b.w	8006752 <__swbuf_r>
 8006bbe:	6813      	ldr	r3, [r2, #0]
 8006bc0:	1c58      	adds	r0, r3, #1
 8006bc2:	6010      	str	r0, [r2, #0]
 8006bc4:	7019      	strb	r1, [r3, #0]
 8006bc6:	4608      	mov	r0, r1
 8006bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <__sfputs_r>:
 8006bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	460f      	mov	r7, r1
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	18d5      	adds	r5, r2, r3
 8006bd8:	42ac      	cmp	r4, r5
 8006bda:	d101      	bne.n	8006be0 <__sfputs_r+0x12>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e007      	b.n	8006bf0 <__sfputs_r+0x22>
 8006be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be4:	463a      	mov	r2, r7
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7ff ffda 	bl	8006ba0 <__sfputc_r>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d1f3      	bne.n	8006bd8 <__sfputs_r+0xa>
 8006bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bf4 <_vfiprintf_r>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	b09d      	sub	sp, #116	@ 0x74
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	4698      	mov	r8, r3
 8006c00:	4606      	mov	r6, r0
 8006c02:	b118      	cbz	r0, 8006c0c <_vfiprintf_r+0x18>
 8006c04:	6a03      	ldr	r3, [r0, #32]
 8006c06:	b90b      	cbnz	r3, 8006c0c <_vfiprintf_r+0x18>
 8006c08:	f7ff fcba 	bl	8006580 <__sinit>
 8006c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c0e:	07d9      	lsls	r1, r3, #31
 8006c10:	d405      	bmi.n	8006c1e <_vfiprintf_r+0x2a>
 8006c12:	89ab      	ldrh	r3, [r5, #12]
 8006c14:	059a      	lsls	r2, r3, #22
 8006c16:	d402      	bmi.n	8006c1e <_vfiprintf_r+0x2a>
 8006c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c1a:	f7ff feb8 	bl	800698e <__retarget_lock_acquire_recursive>
 8006c1e:	89ab      	ldrh	r3, [r5, #12]
 8006c20:	071b      	lsls	r3, r3, #28
 8006c22:	d501      	bpl.n	8006c28 <_vfiprintf_r+0x34>
 8006c24:	692b      	ldr	r3, [r5, #16]
 8006c26:	b99b      	cbnz	r3, 8006c50 <_vfiprintf_r+0x5c>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff fdd0 	bl	80067d0 <__swsetup_r>
 8006c30:	b170      	cbz	r0, 8006c50 <_vfiprintf_r+0x5c>
 8006c32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c34:	07dc      	lsls	r4, r3, #31
 8006c36:	d504      	bpl.n	8006c42 <_vfiprintf_r+0x4e>
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c3c:	b01d      	add	sp, #116	@ 0x74
 8006c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c42:	89ab      	ldrh	r3, [r5, #12]
 8006c44:	0598      	lsls	r0, r3, #22
 8006c46:	d4f7      	bmi.n	8006c38 <_vfiprintf_r+0x44>
 8006c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c4a:	f7ff fea1 	bl	8006990 <__retarget_lock_release_recursive>
 8006c4e:	e7f3      	b.n	8006c38 <_vfiprintf_r+0x44>
 8006c50:	2300      	movs	r3, #0
 8006c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c54:	2320      	movs	r3, #32
 8006c56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c5e:	2330      	movs	r3, #48	@ 0x30
 8006c60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e10 <_vfiprintf_r+0x21c>
 8006c64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c68:	f04f 0901 	mov.w	r9, #1
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	469a      	mov	sl, r3
 8006c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c74:	b10a      	cbz	r2, 8006c7a <_vfiprintf_r+0x86>
 8006c76:	2a25      	cmp	r2, #37	@ 0x25
 8006c78:	d1f9      	bne.n	8006c6e <_vfiprintf_r+0x7a>
 8006c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c7e:	d00b      	beq.n	8006c98 <_vfiprintf_r+0xa4>
 8006c80:	465b      	mov	r3, fp
 8006c82:	4622      	mov	r2, r4
 8006c84:	4629      	mov	r1, r5
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7ff ffa1 	bl	8006bce <__sfputs_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f000 80a7 	beq.w	8006de0 <_vfiprintf_r+0x1ec>
 8006c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c94:	445a      	add	r2, fp
 8006c96:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c98:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 809f 	beq.w	8006de0 <_vfiprintf_r+0x1ec>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cac:	f10a 0a01 	add.w	sl, sl, #1
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	9307      	str	r3, [sp, #28]
 8006cb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cba:	4654      	mov	r4, sl
 8006cbc:	2205      	movs	r2, #5
 8006cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc2:	4853      	ldr	r0, [pc, #332]	@ (8006e10 <_vfiprintf_r+0x21c>)
 8006cc4:	f7f9 fa8c 	bl	80001e0 <memchr>
 8006cc8:	9a04      	ldr	r2, [sp, #16]
 8006cca:	b9d8      	cbnz	r0, 8006d04 <_vfiprintf_r+0x110>
 8006ccc:	06d1      	lsls	r1, r2, #27
 8006cce:	bf44      	itt	mi
 8006cd0:	2320      	movmi	r3, #32
 8006cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd6:	0713      	lsls	r3, r2, #28
 8006cd8:	bf44      	itt	mi
 8006cda:	232b      	movmi	r3, #43	@ 0x2b
 8006cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce6:	d015      	beq.n	8006d14 <_vfiprintf_r+0x120>
 8006ce8:	9a07      	ldr	r2, [sp, #28]
 8006cea:	4654      	mov	r4, sl
 8006cec:	2000      	movs	r0, #0
 8006cee:	f04f 0c0a 	mov.w	ip, #10
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cf8:	3b30      	subs	r3, #48	@ 0x30
 8006cfa:	2b09      	cmp	r3, #9
 8006cfc:	d94b      	bls.n	8006d96 <_vfiprintf_r+0x1a2>
 8006cfe:	b1b0      	cbz	r0, 8006d2e <_vfiprintf_r+0x13a>
 8006d00:	9207      	str	r2, [sp, #28]
 8006d02:	e014      	b.n	8006d2e <_vfiprintf_r+0x13a>
 8006d04:	eba0 0308 	sub.w	r3, r0, r8
 8006d08:	fa09 f303 	lsl.w	r3, r9, r3
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	46a2      	mov	sl, r4
 8006d12:	e7d2      	b.n	8006cba <_vfiprintf_r+0xc6>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	1d19      	adds	r1, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	9103      	str	r1, [sp, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfbb      	ittet	lt
 8006d20:	425b      	neglt	r3, r3
 8006d22:	f042 0202 	orrlt.w	r2, r2, #2
 8006d26:	9307      	strge	r3, [sp, #28]
 8006d28:	9307      	strlt	r3, [sp, #28]
 8006d2a:	bfb8      	it	lt
 8006d2c:	9204      	strlt	r2, [sp, #16]
 8006d2e:	7823      	ldrb	r3, [r4, #0]
 8006d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d32:	d10a      	bne.n	8006d4a <_vfiprintf_r+0x156>
 8006d34:	7863      	ldrb	r3, [r4, #1]
 8006d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d38:	d132      	bne.n	8006da0 <_vfiprintf_r+0x1ac>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	1d1a      	adds	r2, r3, #4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	9203      	str	r2, [sp, #12]
 8006d42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d46:	3402      	adds	r4, #2
 8006d48:	9305      	str	r3, [sp, #20]
 8006d4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e20 <_vfiprintf_r+0x22c>
 8006d4e:	7821      	ldrb	r1, [r4, #0]
 8006d50:	2203      	movs	r2, #3
 8006d52:	4650      	mov	r0, sl
 8006d54:	f7f9 fa44 	bl	80001e0 <memchr>
 8006d58:	b138      	cbz	r0, 8006d6a <_vfiprintf_r+0x176>
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	eba0 000a 	sub.w	r0, r0, sl
 8006d60:	2240      	movs	r2, #64	@ 0x40
 8006d62:	4082      	lsls	r2, r0
 8006d64:	4313      	orrs	r3, r2
 8006d66:	3401      	adds	r4, #1
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d6e:	4829      	ldr	r0, [pc, #164]	@ (8006e14 <_vfiprintf_r+0x220>)
 8006d70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d74:	2206      	movs	r2, #6
 8006d76:	f7f9 fa33 	bl	80001e0 <memchr>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d03f      	beq.n	8006dfe <_vfiprintf_r+0x20a>
 8006d7e:	4b26      	ldr	r3, [pc, #152]	@ (8006e18 <_vfiprintf_r+0x224>)
 8006d80:	bb1b      	cbnz	r3, 8006dca <_vfiprintf_r+0x1d6>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	3307      	adds	r3, #7
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	9303      	str	r3, [sp, #12]
 8006d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d90:	443b      	add	r3, r7
 8006d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d94:	e76a      	b.n	8006c6c <_vfiprintf_r+0x78>
 8006d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	e7a8      	b.n	8006cf2 <_vfiprintf_r+0xfe>
 8006da0:	2300      	movs	r3, #0
 8006da2:	3401      	adds	r4, #1
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	4619      	mov	r1, r3
 8006da8:	f04f 0c0a 	mov.w	ip, #10
 8006dac:	4620      	mov	r0, r4
 8006dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db2:	3a30      	subs	r2, #48	@ 0x30
 8006db4:	2a09      	cmp	r2, #9
 8006db6:	d903      	bls.n	8006dc0 <_vfiprintf_r+0x1cc>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0c6      	beq.n	8006d4a <_vfiprintf_r+0x156>
 8006dbc:	9105      	str	r1, [sp, #20]
 8006dbe:	e7c4      	b.n	8006d4a <_vfiprintf_r+0x156>
 8006dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e7f0      	b.n	8006dac <_vfiprintf_r+0x1b8>
 8006dca:	ab03      	add	r3, sp, #12
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	462a      	mov	r2, r5
 8006dd0:	4b12      	ldr	r3, [pc, #72]	@ (8006e1c <_vfiprintf_r+0x228>)
 8006dd2:	a904      	add	r1, sp, #16
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f3af 8000 	nop.w
 8006dda:	4607      	mov	r7, r0
 8006ddc:	1c78      	adds	r0, r7, #1
 8006dde:	d1d6      	bne.n	8006d8e <_vfiprintf_r+0x19a>
 8006de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006de2:	07d9      	lsls	r1, r3, #31
 8006de4:	d405      	bmi.n	8006df2 <_vfiprintf_r+0x1fe>
 8006de6:	89ab      	ldrh	r3, [r5, #12]
 8006de8:	059a      	lsls	r2, r3, #22
 8006dea:	d402      	bmi.n	8006df2 <_vfiprintf_r+0x1fe>
 8006dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dee:	f7ff fdcf 	bl	8006990 <__retarget_lock_release_recursive>
 8006df2:	89ab      	ldrh	r3, [r5, #12]
 8006df4:	065b      	lsls	r3, r3, #25
 8006df6:	f53f af1f 	bmi.w	8006c38 <_vfiprintf_r+0x44>
 8006dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dfc:	e71e      	b.n	8006c3c <_vfiprintf_r+0x48>
 8006dfe:	ab03      	add	r3, sp, #12
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	462a      	mov	r2, r5
 8006e04:	4b05      	ldr	r3, [pc, #20]	@ (8006e1c <_vfiprintf_r+0x228>)
 8006e06:	a904      	add	r1, sp, #16
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f000 f879 	bl	8006f00 <_printf_i>
 8006e0e:	e7e4      	b.n	8006dda <_vfiprintf_r+0x1e6>
 8006e10:	08007518 	.word	0x08007518
 8006e14:	08007522 	.word	0x08007522
 8006e18:	00000000 	.word	0x00000000
 8006e1c:	08006bcf 	.word	0x08006bcf
 8006e20:	0800751e 	.word	0x0800751e

08006e24 <_printf_common>:
 8006e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	4616      	mov	r6, r2
 8006e2a:	4698      	mov	r8, r3
 8006e2c:	688a      	ldr	r2, [r1, #8]
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e34:	4293      	cmp	r3, r2
 8006e36:	bfb8      	it	lt
 8006e38:	4613      	movlt	r3, r2
 8006e3a:	6033      	str	r3, [r6, #0]
 8006e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e40:	4607      	mov	r7, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b10a      	cbz	r2, 8006e4a <_printf_common+0x26>
 8006e46:	3301      	adds	r3, #1
 8006e48:	6033      	str	r3, [r6, #0]
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	0699      	lsls	r1, r3, #26
 8006e4e:	bf42      	ittt	mi
 8006e50:	6833      	ldrmi	r3, [r6, #0]
 8006e52:	3302      	addmi	r3, #2
 8006e54:	6033      	strmi	r3, [r6, #0]
 8006e56:	6825      	ldr	r5, [r4, #0]
 8006e58:	f015 0506 	ands.w	r5, r5, #6
 8006e5c:	d106      	bne.n	8006e6c <_printf_common+0x48>
 8006e5e:	f104 0a19 	add.w	sl, r4, #25
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	6832      	ldr	r2, [r6, #0]
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dc26      	bgt.n	8006eba <_printf_common+0x96>
 8006e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e70:	6822      	ldr	r2, [r4, #0]
 8006e72:	3b00      	subs	r3, #0
 8006e74:	bf18      	it	ne
 8006e76:	2301      	movne	r3, #1
 8006e78:	0692      	lsls	r2, r2, #26
 8006e7a:	d42b      	bmi.n	8006ed4 <_printf_common+0xb0>
 8006e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e80:	4641      	mov	r1, r8
 8006e82:	4638      	mov	r0, r7
 8006e84:	47c8      	blx	r9
 8006e86:	3001      	adds	r0, #1
 8006e88:	d01e      	beq.n	8006ec8 <_printf_common+0xa4>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	6922      	ldr	r2, [r4, #16]
 8006e8e:	f003 0306 	and.w	r3, r3, #6
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	bf02      	ittt	eq
 8006e96:	68e5      	ldreq	r5, [r4, #12]
 8006e98:	6833      	ldreq	r3, [r6, #0]
 8006e9a:	1aed      	subeq	r5, r5, r3
 8006e9c:	68a3      	ldr	r3, [r4, #8]
 8006e9e:	bf0c      	ite	eq
 8006ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ea4:	2500      	movne	r5, #0
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	bfc4      	itt	gt
 8006eaa:	1a9b      	subgt	r3, r3, r2
 8006eac:	18ed      	addgt	r5, r5, r3
 8006eae:	2600      	movs	r6, #0
 8006eb0:	341a      	adds	r4, #26
 8006eb2:	42b5      	cmp	r5, r6
 8006eb4:	d11a      	bne.n	8006eec <_printf_common+0xc8>
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e008      	b.n	8006ecc <_printf_common+0xa8>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	4641      	mov	r1, r8
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	47c8      	blx	r9
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d103      	bne.n	8006ed0 <_printf_common+0xac>
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	e7c6      	b.n	8006e62 <_printf_common+0x3e>
 8006ed4:	18e1      	adds	r1, r4, r3
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	2030      	movs	r0, #48	@ 0x30
 8006eda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ede:	4422      	add	r2, r4
 8006ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ee4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ee8:	3302      	adds	r3, #2
 8006eea:	e7c7      	b.n	8006e7c <_printf_common+0x58>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4622      	mov	r2, r4
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c8      	blx	r9
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d0e6      	beq.n	8006ec8 <_printf_common+0xa4>
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7d9      	b.n	8006eb2 <_printf_common+0x8e>
	...

08006f00 <_printf_i>:
 8006f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	7e0f      	ldrb	r7, [r1, #24]
 8006f06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f08:	2f78      	cmp	r7, #120	@ 0x78
 8006f0a:	4691      	mov	r9, r2
 8006f0c:	4680      	mov	r8, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	469a      	mov	sl, r3
 8006f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f16:	d807      	bhi.n	8006f28 <_printf_i+0x28>
 8006f18:	2f62      	cmp	r7, #98	@ 0x62
 8006f1a:	d80a      	bhi.n	8006f32 <_printf_i+0x32>
 8006f1c:	2f00      	cmp	r7, #0
 8006f1e:	f000 80d1 	beq.w	80070c4 <_printf_i+0x1c4>
 8006f22:	2f58      	cmp	r7, #88	@ 0x58
 8006f24:	f000 80b8 	beq.w	8007098 <_printf_i+0x198>
 8006f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f30:	e03a      	b.n	8006fa8 <_printf_i+0xa8>
 8006f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f36:	2b15      	cmp	r3, #21
 8006f38:	d8f6      	bhi.n	8006f28 <_printf_i+0x28>
 8006f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f40 <_printf_i+0x40>)
 8006f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f40:	08006f99 	.word	0x08006f99
 8006f44:	08006fad 	.word	0x08006fad
 8006f48:	08006f29 	.word	0x08006f29
 8006f4c:	08006f29 	.word	0x08006f29
 8006f50:	08006f29 	.word	0x08006f29
 8006f54:	08006f29 	.word	0x08006f29
 8006f58:	08006fad 	.word	0x08006fad
 8006f5c:	08006f29 	.word	0x08006f29
 8006f60:	08006f29 	.word	0x08006f29
 8006f64:	08006f29 	.word	0x08006f29
 8006f68:	08006f29 	.word	0x08006f29
 8006f6c:	080070ab 	.word	0x080070ab
 8006f70:	08006fd7 	.word	0x08006fd7
 8006f74:	08007065 	.word	0x08007065
 8006f78:	08006f29 	.word	0x08006f29
 8006f7c:	08006f29 	.word	0x08006f29
 8006f80:	080070cd 	.word	0x080070cd
 8006f84:	08006f29 	.word	0x08006f29
 8006f88:	08006fd7 	.word	0x08006fd7
 8006f8c:	08006f29 	.word	0x08006f29
 8006f90:	08006f29 	.word	0x08006f29
 8006f94:	0800706d 	.word	0x0800706d
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	1d1a      	adds	r2, r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6032      	str	r2, [r6, #0]
 8006fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e09c      	b.n	80070e6 <_printf_i+0x1e6>
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	1d19      	adds	r1, r3, #4
 8006fb2:	6031      	str	r1, [r6, #0]
 8006fb4:	0606      	lsls	r6, r0, #24
 8006fb6:	d501      	bpl.n	8006fbc <_printf_i+0xbc>
 8006fb8:	681d      	ldr	r5, [r3, #0]
 8006fba:	e003      	b.n	8006fc4 <_printf_i+0xc4>
 8006fbc:	0645      	lsls	r5, r0, #25
 8006fbe:	d5fb      	bpl.n	8006fb8 <_printf_i+0xb8>
 8006fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	da03      	bge.n	8006fd0 <_printf_i+0xd0>
 8006fc8:	232d      	movs	r3, #45	@ 0x2d
 8006fca:	426d      	negs	r5, r5
 8006fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fd0:	4858      	ldr	r0, [pc, #352]	@ (8007134 <_printf_i+0x234>)
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	e011      	b.n	8006ffa <_printf_i+0xfa>
 8006fd6:	6821      	ldr	r1, [r4, #0]
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	0608      	lsls	r0, r1, #24
 8006fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fe0:	d402      	bmi.n	8006fe8 <_printf_i+0xe8>
 8006fe2:	0649      	lsls	r1, r1, #25
 8006fe4:	bf48      	it	mi
 8006fe6:	b2ad      	uxthmi	r5, r5
 8006fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fea:	4852      	ldr	r0, [pc, #328]	@ (8007134 <_printf_i+0x234>)
 8006fec:	6033      	str	r3, [r6, #0]
 8006fee:	bf14      	ite	ne
 8006ff0:	230a      	movne	r3, #10
 8006ff2:	2308      	moveq	r3, #8
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ffa:	6866      	ldr	r6, [r4, #4]
 8006ffc:	60a6      	str	r6, [r4, #8]
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	db05      	blt.n	800700e <_printf_i+0x10e>
 8007002:	6821      	ldr	r1, [r4, #0]
 8007004:	432e      	orrs	r6, r5
 8007006:	f021 0104 	bic.w	r1, r1, #4
 800700a:	6021      	str	r1, [r4, #0]
 800700c:	d04b      	beq.n	80070a6 <_printf_i+0x1a6>
 800700e:	4616      	mov	r6, r2
 8007010:	fbb5 f1f3 	udiv	r1, r5, r3
 8007014:	fb03 5711 	mls	r7, r3, r1, r5
 8007018:	5dc7      	ldrb	r7, [r0, r7]
 800701a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800701e:	462f      	mov	r7, r5
 8007020:	42bb      	cmp	r3, r7
 8007022:	460d      	mov	r5, r1
 8007024:	d9f4      	bls.n	8007010 <_printf_i+0x110>
 8007026:	2b08      	cmp	r3, #8
 8007028:	d10b      	bne.n	8007042 <_printf_i+0x142>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	07df      	lsls	r7, r3, #31
 800702e:	d508      	bpl.n	8007042 <_printf_i+0x142>
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	6861      	ldr	r1, [r4, #4]
 8007034:	4299      	cmp	r1, r3
 8007036:	bfde      	ittt	le
 8007038:	2330      	movle	r3, #48	@ 0x30
 800703a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800703e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007042:	1b92      	subs	r2, r2, r6
 8007044:	6122      	str	r2, [r4, #16]
 8007046:	f8cd a000 	str.w	sl, [sp]
 800704a:	464b      	mov	r3, r9
 800704c:	aa03      	add	r2, sp, #12
 800704e:	4621      	mov	r1, r4
 8007050:	4640      	mov	r0, r8
 8007052:	f7ff fee7 	bl	8006e24 <_printf_common>
 8007056:	3001      	adds	r0, #1
 8007058:	d14a      	bne.n	80070f0 <_printf_i+0x1f0>
 800705a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800705e:	b004      	add	sp, #16
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	f043 0320 	orr.w	r3, r3, #32
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	4832      	ldr	r0, [pc, #200]	@ (8007138 <_printf_i+0x238>)
 800706e:	2778      	movs	r7, #120	@ 0x78
 8007070:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	6831      	ldr	r1, [r6, #0]
 8007078:	061f      	lsls	r7, r3, #24
 800707a:	f851 5b04 	ldr.w	r5, [r1], #4
 800707e:	d402      	bmi.n	8007086 <_printf_i+0x186>
 8007080:	065f      	lsls	r7, r3, #25
 8007082:	bf48      	it	mi
 8007084:	b2ad      	uxthmi	r5, r5
 8007086:	6031      	str	r1, [r6, #0]
 8007088:	07d9      	lsls	r1, r3, #31
 800708a:	bf44      	itt	mi
 800708c:	f043 0320 	orrmi.w	r3, r3, #32
 8007090:	6023      	strmi	r3, [r4, #0]
 8007092:	b11d      	cbz	r5, 800709c <_printf_i+0x19c>
 8007094:	2310      	movs	r3, #16
 8007096:	e7ad      	b.n	8006ff4 <_printf_i+0xf4>
 8007098:	4826      	ldr	r0, [pc, #152]	@ (8007134 <_printf_i+0x234>)
 800709a:	e7e9      	b.n	8007070 <_printf_i+0x170>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	f023 0320 	bic.w	r3, r3, #32
 80070a2:	6023      	str	r3, [r4, #0]
 80070a4:	e7f6      	b.n	8007094 <_printf_i+0x194>
 80070a6:	4616      	mov	r6, r2
 80070a8:	e7bd      	b.n	8007026 <_printf_i+0x126>
 80070aa:	6833      	ldr	r3, [r6, #0]
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	6961      	ldr	r1, [r4, #20]
 80070b0:	1d18      	adds	r0, r3, #4
 80070b2:	6030      	str	r0, [r6, #0]
 80070b4:	062e      	lsls	r6, r5, #24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	d501      	bpl.n	80070be <_printf_i+0x1be>
 80070ba:	6019      	str	r1, [r3, #0]
 80070bc:	e002      	b.n	80070c4 <_printf_i+0x1c4>
 80070be:	0668      	lsls	r0, r5, #25
 80070c0:	d5fb      	bpl.n	80070ba <_printf_i+0x1ba>
 80070c2:	8019      	strh	r1, [r3, #0]
 80070c4:	2300      	movs	r3, #0
 80070c6:	6123      	str	r3, [r4, #16]
 80070c8:	4616      	mov	r6, r2
 80070ca:	e7bc      	b.n	8007046 <_printf_i+0x146>
 80070cc:	6833      	ldr	r3, [r6, #0]
 80070ce:	1d1a      	adds	r2, r3, #4
 80070d0:	6032      	str	r2, [r6, #0]
 80070d2:	681e      	ldr	r6, [r3, #0]
 80070d4:	6862      	ldr	r2, [r4, #4]
 80070d6:	2100      	movs	r1, #0
 80070d8:	4630      	mov	r0, r6
 80070da:	f7f9 f881 	bl	80001e0 <memchr>
 80070de:	b108      	cbz	r0, 80070e4 <_printf_i+0x1e4>
 80070e0:	1b80      	subs	r0, r0, r6
 80070e2:	6060      	str	r0, [r4, #4]
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	2300      	movs	r3, #0
 80070ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ee:	e7aa      	b.n	8007046 <_printf_i+0x146>
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	4632      	mov	r2, r6
 80070f4:	4649      	mov	r1, r9
 80070f6:	4640      	mov	r0, r8
 80070f8:	47d0      	blx	sl
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0ad      	beq.n	800705a <_printf_i+0x15a>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	079b      	lsls	r3, r3, #30
 8007102:	d413      	bmi.n	800712c <_printf_i+0x22c>
 8007104:	68e0      	ldr	r0, [r4, #12]
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	4298      	cmp	r0, r3
 800710a:	bfb8      	it	lt
 800710c:	4618      	movlt	r0, r3
 800710e:	e7a6      	b.n	800705e <_printf_i+0x15e>
 8007110:	2301      	movs	r3, #1
 8007112:	4632      	mov	r2, r6
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	47d0      	blx	sl
 800711a:	3001      	adds	r0, #1
 800711c:	d09d      	beq.n	800705a <_printf_i+0x15a>
 800711e:	3501      	adds	r5, #1
 8007120:	68e3      	ldr	r3, [r4, #12]
 8007122:	9903      	ldr	r1, [sp, #12]
 8007124:	1a5b      	subs	r3, r3, r1
 8007126:	42ab      	cmp	r3, r5
 8007128:	dcf2      	bgt.n	8007110 <_printf_i+0x210>
 800712a:	e7eb      	b.n	8007104 <_printf_i+0x204>
 800712c:	2500      	movs	r5, #0
 800712e:	f104 0619 	add.w	r6, r4, #25
 8007132:	e7f5      	b.n	8007120 <_printf_i+0x220>
 8007134:	08007529 	.word	0x08007529
 8007138:	0800753a 	.word	0x0800753a

0800713c <__sflush_r>:
 800713c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	0716      	lsls	r6, r2, #28
 8007146:	4605      	mov	r5, r0
 8007148:	460c      	mov	r4, r1
 800714a:	d454      	bmi.n	80071f6 <__sflush_r+0xba>
 800714c:	684b      	ldr	r3, [r1, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	dc02      	bgt.n	8007158 <__sflush_r+0x1c>
 8007152:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	dd48      	ble.n	80071ea <__sflush_r+0xae>
 8007158:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800715a:	2e00      	cmp	r6, #0
 800715c:	d045      	beq.n	80071ea <__sflush_r+0xae>
 800715e:	2300      	movs	r3, #0
 8007160:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007164:	682f      	ldr	r7, [r5, #0]
 8007166:	6a21      	ldr	r1, [r4, #32]
 8007168:	602b      	str	r3, [r5, #0]
 800716a:	d030      	beq.n	80071ce <__sflush_r+0x92>
 800716c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	0759      	lsls	r1, r3, #29
 8007172:	d505      	bpl.n	8007180 <__sflush_r+0x44>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800717a:	b10b      	cbz	r3, 8007180 <__sflush_r+0x44>
 800717c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	2300      	movs	r3, #0
 8007182:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007184:	6a21      	ldr	r1, [r4, #32]
 8007186:	4628      	mov	r0, r5
 8007188:	47b0      	blx	r6
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	d106      	bne.n	800719e <__sflush_r+0x62>
 8007190:	6829      	ldr	r1, [r5, #0]
 8007192:	291d      	cmp	r1, #29
 8007194:	d82b      	bhi.n	80071ee <__sflush_r+0xb2>
 8007196:	4a2a      	ldr	r2, [pc, #168]	@ (8007240 <__sflush_r+0x104>)
 8007198:	40ca      	lsrs	r2, r1
 800719a:	07d6      	lsls	r6, r2, #31
 800719c:	d527      	bpl.n	80071ee <__sflush_r+0xb2>
 800719e:	2200      	movs	r2, #0
 80071a0:	6062      	str	r2, [r4, #4]
 80071a2:	04d9      	lsls	r1, r3, #19
 80071a4:	6922      	ldr	r2, [r4, #16]
 80071a6:	6022      	str	r2, [r4, #0]
 80071a8:	d504      	bpl.n	80071b4 <__sflush_r+0x78>
 80071aa:	1c42      	adds	r2, r0, #1
 80071ac:	d101      	bne.n	80071b2 <__sflush_r+0x76>
 80071ae:	682b      	ldr	r3, [r5, #0]
 80071b0:	b903      	cbnz	r3, 80071b4 <__sflush_r+0x78>
 80071b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80071b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071b6:	602f      	str	r7, [r5, #0]
 80071b8:	b1b9      	cbz	r1, 80071ea <__sflush_r+0xae>
 80071ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071be:	4299      	cmp	r1, r3
 80071c0:	d002      	beq.n	80071c8 <__sflush_r+0x8c>
 80071c2:	4628      	mov	r0, r5
 80071c4:	f7ff fbf4 	bl	80069b0 <_free_r>
 80071c8:	2300      	movs	r3, #0
 80071ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80071cc:	e00d      	b.n	80071ea <__sflush_r+0xae>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b0      	blx	r6
 80071d4:	4602      	mov	r2, r0
 80071d6:	1c50      	adds	r0, r2, #1
 80071d8:	d1c9      	bne.n	800716e <__sflush_r+0x32>
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0c6      	beq.n	800716e <__sflush_r+0x32>
 80071e0:	2b1d      	cmp	r3, #29
 80071e2:	d001      	beq.n	80071e8 <__sflush_r+0xac>
 80071e4:	2b16      	cmp	r3, #22
 80071e6:	d11e      	bne.n	8007226 <__sflush_r+0xea>
 80071e8:	602f      	str	r7, [r5, #0]
 80071ea:	2000      	movs	r0, #0
 80071ec:	e022      	b.n	8007234 <__sflush_r+0xf8>
 80071ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071f2:	b21b      	sxth	r3, r3
 80071f4:	e01b      	b.n	800722e <__sflush_r+0xf2>
 80071f6:	690f      	ldr	r7, [r1, #16]
 80071f8:	2f00      	cmp	r7, #0
 80071fa:	d0f6      	beq.n	80071ea <__sflush_r+0xae>
 80071fc:	0793      	lsls	r3, r2, #30
 80071fe:	680e      	ldr	r6, [r1, #0]
 8007200:	bf08      	it	eq
 8007202:	694b      	ldreq	r3, [r1, #20]
 8007204:	600f      	str	r7, [r1, #0]
 8007206:	bf18      	it	ne
 8007208:	2300      	movne	r3, #0
 800720a:	eba6 0807 	sub.w	r8, r6, r7
 800720e:	608b      	str	r3, [r1, #8]
 8007210:	f1b8 0f00 	cmp.w	r8, #0
 8007214:	dde9      	ble.n	80071ea <__sflush_r+0xae>
 8007216:	6a21      	ldr	r1, [r4, #32]
 8007218:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800721a:	4643      	mov	r3, r8
 800721c:	463a      	mov	r2, r7
 800721e:	4628      	mov	r0, r5
 8007220:	47b0      	blx	r6
 8007222:	2800      	cmp	r0, #0
 8007224:	dc08      	bgt.n	8007238 <__sflush_r+0xfc>
 8007226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007238:	4407      	add	r7, r0
 800723a:	eba8 0800 	sub.w	r8, r8, r0
 800723e:	e7e7      	b.n	8007210 <__sflush_r+0xd4>
 8007240:	20400001 	.word	0x20400001

08007244 <_fflush_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	690b      	ldr	r3, [r1, #16]
 8007248:	4605      	mov	r5, r0
 800724a:	460c      	mov	r4, r1
 800724c:	b913      	cbnz	r3, 8007254 <_fflush_r+0x10>
 800724e:	2500      	movs	r5, #0
 8007250:	4628      	mov	r0, r5
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	b118      	cbz	r0, 800725e <_fflush_r+0x1a>
 8007256:	6a03      	ldr	r3, [r0, #32]
 8007258:	b90b      	cbnz	r3, 800725e <_fflush_r+0x1a>
 800725a:	f7ff f991 	bl	8006580 <__sinit>
 800725e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f3      	beq.n	800724e <_fflush_r+0xa>
 8007266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007268:	07d0      	lsls	r0, r2, #31
 800726a:	d404      	bmi.n	8007276 <_fflush_r+0x32>
 800726c:	0599      	lsls	r1, r3, #22
 800726e:	d402      	bmi.n	8007276 <_fflush_r+0x32>
 8007270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007272:	f7ff fb8c 	bl	800698e <__retarget_lock_acquire_recursive>
 8007276:	4628      	mov	r0, r5
 8007278:	4621      	mov	r1, r4
 800727a:	f7ff ff5f 	bl	800713c <__sflush_r>
 800727e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007280:	07da      	lsls	r2, r3, #31
 8007282:	4605      	mov	r5, r0
 8007284:	d4e4      	bmi.n	8007250 <_fflush_r+0xc>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	059b      	lsls	r3, r3, #22
 800728a:	d4e1      	bmi.n	8007250 <_fflush_r+0xc>
 800728c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728e:	f7ff fb7f 	bl	8006990 <__retarget_lock_release_recursive>
 8007292:	e7dd      	b.n	8007250 <_fflush_r+0xc>

08007294 <__swhatbuf_r>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	460c      	mov	r4, r1
 8007298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729c:	2900      	cmp	r1, #0
 800729e:	b096      	sub	sp, #88	@ 0x58
 80072a0:	4615      	mov	r5, r2
 80072a2:	461e      	mov	r6, r3
 80072a4:	da0d      	bge.n	80072c2 <__swhatbuf_r+0x2e>
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072ac:	f04f 0100 	mov.w	r1, #0
 80072b0:	bf14      	ite	ne
 80072b2:	2340      	movne	r3, #64	@ 0x40
 80072b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072b8:	2000      	movs	r0, #0
 80072ba:	6031      	str	r1, [r6, #0]
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	b016      	add	sp, #88	@ 0x58
 80072c0:	bd70      	pop	{r4, r5, r6, pc}
 80072c2:	466a      	mov	r2, sp
 80072c4:	f000 f848 	bl	8007358 <_fstat_r>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	dbec      	blt.n	80072a6 <__swhatbuf_r+0x12>
 80072cc:	9901      	ldr	r1, [sp, #4]
 80072ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072d6:	4259      	negs	r1, r3
 80072d8:	4159      	adcs	r1, r3
 80072da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072de:	e7eb      	b.n	80072b8 <__swhatbuf_r+0x24>

080072e0 <__smakebuf_r>:
 80072e0:	898b      	ldrh	r3, [r1, #12]
 80072e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072e4:	079d      	lsls	r5, r3, #30
 80072e6:	4606      	mov	r6, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	d507      	bpl.n	80072fc <__smakebuf_r+0x1c>
 80072ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	2301      	movs	r3, #1
 80072f6:	6163      	str	r3, [r4, #20]
 80072f8:	b003      	add	sp, #12
 80072fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fc:	ab01      	add	r3, sp, #4
 80072fe:	466a      	mov	r2, sp
 8007300:	f7ff ffc8 	bl	8007294 <__swhatbuf_r>
 8007304:	9f00      	ldr	r7, [sp, #0]
 8007306:	4605      	mov	r5, r0
 8007308:	4639      	mov	r1, r7
 800730a:	4630      	mov	r0, r6
 800730c:	f7ff fbbc 	bl	8006a88 <_malloc_r>
 8007310:	b948      	cbnz	r0, 8007326 <__smakebuf_r+0x46>
 8007312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007316:	059a      	lsls	r2, r3, #22
 8007318:	d4ee      	bmi.n	80072f8 <__smakebuf_r+0x18>
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	f043 0302 	orr.w	r3, r3, #2
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	e7e2      	b.n	80072ec <__smakebuf_r+0xc>
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	6020      	str	r0, [r4, #0]
 800732a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	9b01      	ldr	r3, [sp, #4]
 8007332:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007336:	b15b      	cbz	r3, 8007350 <__smakebuf_r+0x70>
 8007338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800733c:	4630      	mov	r0, r6
 800733e:	f000 f81d 	bl	800737c <_isatty_r>
 8007342:	b128      	cbz	r0, 8007350 <__smakebuf_r+0x70>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	431d      	orrs	r5, r3
 8007354:	81a5      	strh	r5, [r4, #12]
 8007356:	e7cf      	b.n	80072f8 <__smakebuf_r+0x18>

08007358 <_fstat_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d07      	ldr	r5, [pc, #28]	@ (8007378 <_fstat_r+0x20>)
 800735c:	2300      	movs	r3, #0
 800735e:	4604      	mov	r4, r0
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	602b      	str	r3, [r5, #0]
 8007366:	f7fc f802 	bl	800336e <_fstat>
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d102      	bne.n	8007374 <_fstat_r+0x1c>
 800736e:	682b      	ldr	r3, [r5, #0]
 8007370:	b103      	cbz	r3, 8007374 <_fstat_r+0x1c>
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	bd38      	pop	{r3, r4, r5, pc}
 8007376:	bf00      	nop
 8007378:	200038ec 	.word	0x200038ec

0800737c <_isatty_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d06      	ldr	r5, [pc, #24]	@ (8007398 <_isatty_r+0x1c>)
 8007380:	2300      	movs	r3, #0
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	602b      	str	r3, [r5, #0]
 8007388:	f7fc f801 	bl	800338e <_isatty>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_isatty_r+0x1a>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_isatty_r+0x1a>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	200038ec 	.word	0x200038ec

0800739c <_sbrk_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d06      	ldr	r5, [pc, #24]	@ (80073b8 <_sbrk_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	f7fc f80a 	bl	80033c0 <_sbrk>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_sbrk_r+0x1a>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_sbrk_r+0x1a>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	200038ec 	.word	0x200038ec

080073bc <_init>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr

080073c8 <_fini>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	bf00      	nop
 80073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ce:	bc08      	pop	{r3}
 80073d0:	469e      	mov	lr, r3
 80073d2:	4770      	bx	lr
